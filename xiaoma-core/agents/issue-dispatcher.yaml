# Issue Dispatcher and Feedback Agent
# 问题分发与回溯智能体

meta:
  name: "Issue Dispatcher and Feedback Agent"
  version: "2.0"
  description: "智能问题分发、任务路由和反馈回溯管理智能体，负责闭环质量保证流程的协调"
  created_date: "2025-09-10"
  specialization: "issue_routing_and_feedback_management"
  priority: "CRITICAL"

# ========== 智能体核心能力 ==========
agent_capabilities:
  core_functions:
    - "智能问题分类与优先级排序"
    - "动态任务路由与分配"
    - "反馈循环管理与追踪"
    - "修复进度监控与催办"
    - "多智能体协调与通信"
    - "冲突检测与解决"
    - "工作流状态同步"
    - "智能重试与回滚管理"

  routing_intelligence:
    - "基于问题类型的智能路由"
    - "负载均衡考虑"
    - "技能匹配优化"
    - "历史性能分析"
    - "依赖关系管理"
    - "并行任务编排"

# ========== 问题接收与分析引擎 ==========
issue_reception_engine:
  input_sources:
    - source: "global_requirements_auditor"
      priority: "HIGHEST"
      data_format: "structured_audit_report"
      processing: "immediate"

    - source: "automated_quality_validator"
      priority: "HIGH"
      data_format: "quality_validation_report"
      processing: "immediate"

    - source: "continuous_monitoring"
      priority: "MEDIUM"
      data_format: "real_time_alerts"
      processing: "batched"

    - source: "manual_feedback"
      priority: "VARIABLE"
      data_format: "unstructured_text"
      processing: "queued"

  issue_parser:
    parsing_strategies:
      - strategy: "structured_data_parser"
        applicable_to: ["audit_reports", "validation_reports"]
        extraction_rules:
          - issue_id_extraction
          - severity_identification
          - component_mapping
          - root_cause_extraction
          - suggested_action_parsing

      - strategy: "natural_language_parser"
        applicable_to: ["manual_feedback", "comments"]
        nlp_techniques:
          - sentiment_analysis
          - entity_recognition
          - intent_classification
          - urgency_detection

      - strategy: "pattern_matcher"
        applicable_to: ["error_logs", "alerts"]
        patterns:
          - error_pattern_recognition
          - anomaly_detection
          - trend_identification

# ========== 智能分类与优先级引擎 ==========
classification_prioritization_engine:
  classification_dimensions:
    by_severity:
      critical:
        description: "生产阻塞或数据丢失风险"
        sla: "2_hours"
        escalation: "immediate"
      high:
        description: "主要功能受影响"
        sla: "8_hours"
        escalation: "4_hours"
      medium:
        description: "次要功能问题"
        sla: "24_hours"
        escalation: "12_hours"
      low:
        description: "优化建议"
        sla: "72_hours"
        escalation: "none"

    by_type:
      requirement_gap:
        description: "需求覆盖缺失"
        default_assignee: "sm"
        fix_complexity: "medium"

      story_quality:
        description: "用户故事质量问题"
        default_assignee: "sm"
        fix_complexity: "low"

      implementation_defect:
        description: "代码实现缺陷"
        default_assignee: "dev"
        fix_complexity: "variable"

      test_coverage:
        description: "测试覆盖不足"
        default_assignee: "qa"
        fix_complexity: "medium"

      integration_issue:
        description: "集成问题"
        default_assignee: "architect"
        fix_complexity: "high"

      performance_issue:
        description: "性能问题"
        default_assignee: "dev"
        fix_complexity: "high"

      documentation_gap:
        description: "文档缺失"
        default_assignee: "doc"
        fix_complexity: "low"

  prioritization_algorithm:
    factors:
      - factor: "business_impact"
        weight: 35
        scoring:
          revenue_impact: 10
          user_experience: 8
          compliance_risk: 9
          brand_reputation: 7

      - factor: "technical_severity"
        weight: 30
        scoring:
          data_integrity: 10
          system_stability: 9
          functionality: 7
          performance: 6

      - factor: "effort_estimate"
        weight: 20
        scoring:
          quick_fix: 10
          moderate_effort: 6
          significant_effort: 3
          major_rework: 1

      - factor: "dependency_count"
        weight: 15
        scoring:
          no_dependencies: 10
          few_dependencies: 7
          many_dependencies: 4
          critical_path: 1

    priority_calculation: "weighted_sum_with_threshold_adjustment"

    queue_management:
      strategy: "dynamic_priority_queue"
      rebalancing_frequency: "every_30_minutes"
      starvation_prevention: true
      aging_factor: 1.1 # 每天增加10%优先级

# ========== 智能路由与分配引擎 ==========
intelligent_routing_engine:
  routing_strategies:
    - strategy: "skill_based_routing"
      description: "基于技能匹配的路由"
      matching_criteria:
        - agent_capabilities
        - historical_performance
        - current_workload
        - availability_status

    - strategy: "round_robin_with_weights"
      description: "加权轮询路由"
      applicable_when: "multiple_qualified_agents"
      weight_factors:
        - success_rate
        - average_resolution_time
        - quality_score

    - strategy: "escalation_routing"
      description: "升级路由"
      triggers:
        - sla_breach_imminent
        - repeated_failures
        - critical_severity
      escalation_path:
        - primary_agent
        - senior_agent
        - architect_agent
        - human_intervention

  task_assignment_rules:
    - rule: "missing_user_story"
      conditions:
        issue_type: "requirement_gap"
        sub_type: "missing_story"
      assignments:
        primary: "sm"
        backup: "po"
      action_template:
        command: "create_user_story"
        parameters:
          - requirement_id
          - epic_context
          - acceptance_criteria
      validation_required: true
      success_criteria:
        - story_created
        - requirement_mapped
        - acceptance_criteria_defined

    - rule: "story_quality_improvement"
      conditions:
        issue_type: "story_quality"
        quality_score: "<85"
      assignments:
        primary: "sm"
        reviewer: "po"
      action_template:
        command: "refine_user_story"
        parameters:
          - story_id
          - quality_issues
          - improvement_suggestions
      validation_required: true
      success_criteria:
        - quality_score: ">=90"
        - invest_compliance: true

    - rule: "code_implementation_fix"
      conditions:
        issue_type: "implementation_defect"
      assignments:
        primary: "dev"
        reviewer: "qa"
      action_template:
        command: "fix_implementation"
        parameters:
          - defect_id
          - root_cause
          - fix_suggestion
          - test_cases
      validation_required: true
      success_criteria:
        - code_fixed
        - tests_passing
        - review_approved

    - rule: "test_coverage_enhancement"
      conditions:
        issue_type: "test_coverage"
        coverage: "<80"
      assignments:
        primary: "qa"
        support: "dev"
      action_template:
        command: "enhance_test_coverage"
        parameters:
          - component_id
          - current_coverage
          - target_coverage
          - test_types_needed
      validation_required: false
      success_criteria:
        - coverage: ">=80"
        - critical_paths_covered: true

# ========== 反馈循环管理器 ==========
feedback_loop_manager:
  loop_configuration:
    max_iterations: 5
    iteration_timeout: 3600 # 1小时
    convergence_criteria:
      - all_critical_issues_resolved
      - quality_score_achieved
      - coverage_targets_met

  feedback_tracking:
    tracking_elements:
      - issue_id
      - assigned_agent
      - assignment_timestamp
      - current_status
      - iteration_count
      - resolution_attempts
      - blockers_encountered
      - partial_progress

    status_transitions:
      assigned:
        next_states: ["in_progress", "blocked", "cancelled"]
        timeout: 300 # 5分钟开始处理

      in_progress:
        next_states: ["validation", "blocked", "failed"]
        timeout: 3600 # 1小时完成

      validation:
        next_states: ["completed", "rejected", "rework"]
        timeout: 600 # 10分钟验证

      blocked:
        next_states: ["in_progress", "escalated", "cancelled"]
        timeout: 1800 # 30分钟解决阻塞

      rework:
        next_states: ["in_progress"]
        max_rework_count: 3

      completed:
        next_states: ["closed"]
        success_notification: true

      failed:
        next_states: ["escalated", "cancelled"]
        failure_analysis_required: true

  progress_monitoring:
    monitoring_frequency: "every_5_minutes"
    health_checks:
      - agent_responsiveness
      - task_progress_rate
      - error_rate_threshold
      - resource_utilization

    intervention_triggers:
      - no_progress_for_15_minutes
      - error_rate_exceeds_10_percent
      - agent_unresponsive
      - sla_breach_risk

    intervention_actions:
      - send_reminder
      - escalate_to_backup
      - reassign_task
      - split_into_subtasks
      - request_human_help

# ========== 协调与通信机制 ==========
coordination_communication:
  inter_agent_communication:
    protocols:
      - protocol: "synchronous_request_response"
        use_cases: ["immediate_actions", "validations"]
        timeout: 300
        retry_policy:
          max_retries: 3
          backoff: "exponential"

      - protocol: "asynchronous_messaging"
        use_cases: ["batch_processing", "notifications"]
        delivery_guarantee: "at_least_once"
        message_queue: "priority_queue"

      - protocol: "event_driven"
        use_cases: ["status_updates", "completion_notifications"]
        event_bus: "distributed"
        event_retention: "7_days"

    message_formats:
      task_assignment:
        schema: "json"
        required_fields:
          - task_id
          - task_type
          - priority
          - deadline
          - context
          - success_criteria

      status_update:
        schema: "json"
        required_fields:
          - task_id
          - current_status
          - progress_percentage
          - blockers
          - eta

      completion_report:
        schema: "json"
        required_fields:
          - task_id
          - final_status
          - resolution_details
          - validation_results
          - metrics

  conflict_resolution:
    conflict_types:
      - type: "resource_contention"
        resolution: "priority_based_allocation"

      - type: "contradictory_fixes"
        resolution: "architectural_review"

      - type: "circular_dependencies"
        resolution: "dependency_breaking"

      - type: "version_conflicts"
        resolution: "merge_strategy"

    resolution_strategies:
      automated_resolution:
        applicable_to: ["simple_conflicts", "clear_priorities"]
        methods:
          - rule_based_resolution
          - priority_comparison
          - timestamp_ordering

      collaborative_resolution:
        applicable_to: ["complex_conflicts", "cross_component"]
        methods:
          - multi_agent_negotiation
          - consensus_building
          - voting_mechanism

      escalated_resolution:
        applicable_to: ["critical_conflicts", "deadlocks"]
        methods:
          - architect_intervention
          - human_decision
          - rollback_and_retry

# ========== 修复验证与回归 ==========
fix_validation_engine:
  validation_stages:
    - stage: "immediate_validation"
      description: "立即验证修复是否解决了报告的问题"
      validators:
        - syntax_checker
        - unit_test_runner
        - static_analyzer
      pass_criteria:
        - no_syntax_errors
        - unit_tests_passing
        - no_new_issues_introduced

    - stage: "integration_validation"
      description: "验证修复对系统集成的影响"
      validators:
        - integration_test_runner
        - api_contract_validator
        - database_consistency_checker
      pass_criteria:
        - integration_tests_passing
        - api_contracts_maintained
        - data_integrity_preserved

    - stage: "regression_validation"
      description: "确保修复没有引入新问题"
      validators:
        - regression_test_suite
        - performance_benchmarker
        - security_scanner
      pass_criteria:
        - no_regression_failures
        - performance_maintained
        - no_security_vulnerabilities

    - stage: "business_validation"
      description: "验证业务需求满足情况"
      validators:
        - acceptance_test_runner
        - requirement_coverage_checker
        - user_story_validator
      pass_criteria:
        - acceptance_criteria_met
        - requirements_covered
        - story_completed

  validation_orchestration:
    execution_mode: "progressive" # 逐步深入
    early_termination: true # 失败即停止
    parallel_validation: true # 并行验证

    failure_handling:
      immediate_failure:
        action: "reject_and_rework"
        notification: "immediate"

      partial_failure:
        action: "analyze_and_decide"
        options: ["partial_accept", "full_rework", "split_task"]

      validation_timeout:
        action: "escalate"
        fallback: "manual_validation"

# ========== 报告与度量 ==========
reporting_metrics:
  operational_metrics:
    - metric: "mean_time_to_resolution"
      calculation: "average(resolution_time)"
      target: "<4_hours"
      tracking_period: "rolling_7_days"

    - metric: "first_time_fix_rate"
      calculation: "successful_fixes / total_fixes"
      target: ">80%"
      tracking_period: "rolling_30_days"

    - metric: "rework_rate"
      calculation: "rework_count / total_fixes"
      target: "<20%"
      tracking_period: "rolling_30_days"

    - metric: "sla_compliance"
      calculation: "on_time_resolutions / total_resolutions"
      target: ">95%"
      tracking_period: "rolling_7_days"

  quality_metrics:
    - metric: "fix_effectiveness"
      calculation: "permanent_fixes / total_fixes"
      target: ">90%"

    - metric: "regression_rate"
      calculation: "regressions_introduced / total_fixes"
      target: "<5%"

    - metric: "validation_accuracy"
      calculation: "correct_validations / total_validations"
      target: ">95%"

  reporting_dashboards:
    real_time_dashboard:
      refresh_rate: "30_seconds"
      widgets:
        - active_issues_count
        - in_progress_fixes
        - blocked_tasks
        - sla_risk_items
        - agent_workload_chart
        - resolution_trend_graph

    daily_summary:
      generation_time: "09:00_AM"
      contents:
        - issues_received
        - issues_resolved
        - outstanding_issues
        - average_resolution_time
        - top_problem_areas
        - agent_performance

    weekly_analysis:
      generation_time: "Monday_09:00_AM"
      contents:
        - trend_analysis
        - root_cause_patterns
        - improvement_opportunities
        - capacity_planning
        - quality_trends

# ========== 智能学习与优化 ==========
learning_optimization:
  pattern_recognition:
    - pattern: "recurring_issues"
      detection: "frequency_analysis"
      action: "root_cause_investigation"
      optimization: "preventive_measures"

    - pattern: "fix_effectiveness"
      detection: "success_rate_tracking"
      action: "best_practice_extraction"
      optimization: "template_updates"

    - pattern: "agent_performance"
      detection: "performance_analytics"
      action: "skill_gap_identification"
      optimization: "training_recommendations"

  continuous_improvement:
    - improvement: "routing_optimization"
      method: "machine_learning"
      inputs: ["historical_assignments", "resolution_times", "success_rates"]
      output: "optimized_routing_rules"

    - improvement: "priority_tuning"
      method: "feedback_analysis"
      inputs: ["business_impact", "actual_urgency", "resolution_effort"]
      output: "adjusted_priority_weights"

    - improvement: "validation_enhancement"
      method: "false_positive_analysis"
      inputs: ["validation_results", "actual_outcomes", "rework_cases"]
      output: "improved_validation_rules"

# ========== 成功标准 ==========
success_criteria:
  operational_excellence:
    - "问题路由准确率>95%"
    - "平均响应时间<5分钟"
    - "SLA达成率>95%"
    - "首次修复成功率>80%"

  quality_assurance:
    - "验证准确率>95%"
    - "回归率<5%"
    - "问题逃逸率<2%"
    - "修复永久性>90%"

  efficiency_metrics:
    - "自动化处理率>85%"
    - "并行处理能力>10个任务"
    - "资源利用率70-85%"
    - "端到端处理时间<4小时"
