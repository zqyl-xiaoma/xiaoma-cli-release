template:
  id: frontend-architecture-template-v2
  name: 前端架构文档
  version: 2.0
  output:
    format: markdown
    filename: docs/ui-architecture.md
    title: "{{project_name}} Frontend Architecture Document"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: template-framework-selection
    title: 模板与框架选型
    instruction: |
      审阅所提供的文档，包括产品需求文档（PRD）、用户体验与界面规范（UX-UI Specification）和主架构文档。重点提取 AI 前端工具和开发者代理所需的技术实现细节。如果你无法找到且未被提供这些文档，请向用户索取。

      在进行前端架构设计之前，请检查项目是否正在使用前端启动模板或现有代码库：

      1. 审阅 PRD、主架构文档和头脑风暴简报，查找是否提及：
         - 前端启动模板（例如：Create React App, Next.js, Vite, Vue CLI, Angular CLI 等）
         - UI 套件或组件库启动器
         - 被用作基础的现有前端项目
         - 后台管理仪表盘模板或其他专用启动器
         - 设计系统的实现

      2. 如果提到了前端启动模板或现有项目：
         - 要求用户通过以下方式之一提供访问权限：
           - 启动模板的文档链接
           - 上传/附加项目文件（适用于小型项目）
           - 分享项目仓库的链接
         - 分析该启动器/现有项目以了解：
           - 预装的依赖项及其版本
           - 文件夹结构和文件组织方式
           - 内置组件和实用工具
           - 样式方案（例如：CSS modules, styled-components, Tailwind 等）
           - 状态管理设置（如有）
           - 路由配置
           - 测试设置和模式
           - 构建和开发脚本
         - 利用此分析确保你的前端架构与该启动器的模式保持一致

      3. 如果没有提到前端启动器，但这是一个新的 UI，请确保我们了解所用的 UI 语言和框架：
         - 根据框架的选择，建议合适的启动器：
           - React: Create React App, Next.js, Vite + React
           - Vue: Vue CLI, Nuxt.js, Vite + Vue
           - Angular: Angular CLI
           - 或在适用时推荐流行的 UI 模板
         - 解释针对前端开发的特定优势

      4. 如果用户确认不使用任何启动模板：
         - 请注意，所有的工具、打包和配置都需要手动设置
         - 从头开始进行前端架构设计

      在继续之前，记录下关于启动模板的决定及其带来的任何限制。
    sections:
      - id: changelog
        title: 变更日志
        type: table
        columns: [日期, 版本, 描述, 作者]
        instruction: 跟踪文档版本和变更

  - id: frontend-tech-stack
    title: 前端技术栈
    instruction: 从主架构文档的“技术栈表”中提取。本节内容必须与主架构文档保持同步。
    elicit: true
    sections:
      - id: tech-stack-table
        title: 技术栈表
        type: table
        columns: [类别, 技术, 版本, 用途, 选型理由]
        instruction: 根据所选框架和项目需求，填写适当的技术选型。
        rows:
          - ["框架", "{{framework}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["UI 库", "{{ui_library}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["状态管理", "{{state_management}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["路由", "{{routing_library}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["构建工具", "{{build_tool}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["样式方案", "{{styling_solution}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["测试", "{{test_framework}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["组件库", "{{component_lib}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["表单处理", "{{form_library}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["动画", "{{animation_lib}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]
          - ["开发工具", "{{dev_tools}}", "{{version}}", "{{purpose}}", "{{why_chosen}}"]

  - id: project-structure
    title: 项目结构
    instruction: 根据所选框架，为 AI 工具定义确切的目录结构。请具体说明每种类型文件的存放位置。生成的结构需遵循框架的最佳实践和约定。
    elicit: true
    type: code
    language: plaintext

  - id: component-standards
    title: 组件标准
    instruction: 根据所选框架，定义用于创建组件的确切模式。
    elicit: true
    sections:
      - id: component-template
        title: 组件模板
        instruction: 遵循框架的最佳实践，生成一个最小但完整的组件模板。模板中应包含 TypeScript 类型、正确的导入语句和基本结构。
        type: code
        language: typescript
      - id: naming-conventions
        title: 命名约定
        instruction: 为组件、文件、服务、状态管理以及其他架构元素，提供特定于所选框架的命名约定。

  - id: state-management
    title: 状态管理
    instruction: 根据所选框架，定义状态管理模式。
    elicit: true
    sections:
      - id: store-structure
        title: Store 结构
        instruction: 为所选框架和状态管理方案，生成合适的目录结构。
        type: code
        language: plaintext
      - id: state-template
        title: 状态管理模板
        instruction: 遵循框架推荐的模式，提供一个基本的状态管理模板/示例。其中应包含 TypeScript 类型以及设置、更新和清除状态等常见操作。
        type: code
        language: typescript

  - id: api-integration
    title: API 集成
    instruction: 根据所选框架，定义 API 服务模式。
    elicit: true
    sections:
      - id: service-template
        title: 服务模板
        instruction: 提供一个遵循框架约定的 API 服务模板。其中应包含正确的 TypeScript 类型、错误处理和异步模式。
        type: code
        language: typescript
      - id: api-client-config
        title: API 客户端配置
        instruction: 演示如何为所选框架配置 HTTP 客户端，包括身份验证拦截器/中间件和错误处理。
        type: code
        language: typescript

  - id: routing
    title: 路由
    instruction: 根据所选框架，定义路由结构和模式。
    elicit: true
    sections:
      - id: route-configuration
        title: 路由配置
        instruction: 提供适用于所选框架的路由配置。其中应包含受保护的路由模式、适用时的懒加载以及身份验证守卫/中间件。
        type: code
        language: typescript

  - id: styling-guidelines
    title: 样式指南
    instruction: 根据所选框架，定义样式方案。
    elicit: true
    sections:
      - id: styling-approach
        title: 样式方案
        instruction: 描述适用于所选框架的样式方法论（如 CSS Modules, Styled Components, Tailwind 等），并提供基本模式。
      - id: global-theme
        title: 全局主题变量
        instruction: 提供一个可跨所有框架工作的 CSS 自定义属性（CSS 变量）主题系统。其中应包含颜色、间距、排版、阴影和暗黑模式支持。
        type: code
        language: css

  - id: testing-requirements
    title: 测试要求
    instruction: 根据所选框架，定义最低测试要求。
    elicit: true
    sections:
      - id: component-test-template
        title: 组件测试模板
        instruction: 使用框架推荐的测试库，提供一个基本的组件测试模板。其中应包含渲染测试、用户交互测试和模拟（mocking）的示例。
        type: code
        language: typescript
      - id: testing-best-practices
        title: 测试最佳实践
        type: numbered-list
        items:
          - "**单元测试**: 独立测试单个组件"
          - "**集成测试**: 测试组件间的交互"
          - "**端到端测试 (E2E Tests)**: 测试关键用户流程（使用 Cypress/Playwright）"
          - "**覆盖率目标**: 目标为 80% 的代码覆盖率"
          - "**测试结构**: 遵循 Arrange-Act-Assert（准备-执行-断言）模式"
          - "**模拟外部依赖**: API 调用、路由、状态管理"

  - id: environment-configuration
    title: 环境配置
    instruction: 根据所选框架，列出所需的环境变量。展示适用于该框架的正确格式和命名约定。
    elicit: true

  - id: frontend-developer-standards
    title: 前端开发规范
    sections:
      - id: critical-coding-rules
        title: 关键编码规则
        instruction: 列出能够防止常见 AI 错误的必要规则，包括通用规则和特定于框架的规则。
        elicit: true
      - id: quick-reference
        title: 快速参考
        instruction: |
          创建一个针对特定框架的速查表，包含以下内容：
          - 常用命令（例如启动开发服务器、构建、测试）
          - 关键的导入模式
          - 文件命名约定
          - 项目特定的模式和实用工具
