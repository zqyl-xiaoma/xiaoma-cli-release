# Requirements Coverage Audit Task
# 需求覆盖度审计任务

meta:
  name: "Requirements Coverage Audit"
  description: "全面检查产品需求到用户故事的转化完整性和实施状态"
  version: "1.0"
  created_date: "2025-09-10"
  tags: ["audit", "requirements", "coverage", "validation"]

# ========== 任务配置 ==========
task:
  name: "requirements-coverage-audit"
  aliases:
    - "coverage-audit"
    - "requirement-check"
    - "story-validation"
  category: "validation"
  complexity: "medium"
  estimated_duration: "20-30 minutes"

# ========== 任务描述 ==========
description: |
  系统性检查和验证：

  📋 **需求转化检查**:
  - PRD文档需求是否完全转化为用户故事
  - 史诗级需求的用户故事覆盖度
  - 需求优先级和实施状态匹配度

  ✅ **用户故事完整性检查**:
  - 用户故事是否包含完整的验收标准
  - 数据库设计是否完整实施
  - API接口是否完全实现
  - 任务分解是否合理且完成

  🎯 **实施状态验证**:
  - 用户故事状态的准确性
  - 开发任务的完成度
  - QA结果的真实性
  - 交付物的完整性

# ========== 执行流程 ==========
execution:
  # 第一阶段：需求源文档分析
  phase_1_requirement_analysis:
    name: "需求源文档分析"
    duration: "5-8分钟"
    steps:
      - step: "load_prd_documents"
        description: "加载PRD文档"
        actions:
          - "读取主PRD文档"
          - "扫描docs/prd/目录下的史诗文件"
          - "提取所有需求和用户故事定义"
          - "构建需求层次结构"
        output: "requirements_inventory.json"

      - step: "extract_requirements_matrix"
        description: "提取需求矩阵"
        actions:
          - "识别所有史诗和用户故事"
          - "提取验收标准和功能点"
          - "分析需求优先级"
          - "构建需求依赖关系"
        output: "requirements_matrix.json"

  # 第二阶段：用户故事实施分析
  phase_2_story_implementation_analysis:
    name: "用户故事实施分析"
    duration: "8-12分钟"
    steps:
      - step: "scan_implemented_stories"
        description: "扫描已实施用户故事"
        actions:
          - "扫描docs/stories/目录"
          - "解析每个用户故事文档"
          - "提取实施状态和完成度"
          - "分析任务完成情况"
        output: "implemented_stories_inventory.json"

      - step: "analyze_story_completeness"
        description: "分析用户故事完整性"
        actions:
          - "检查必需章节完整性"
          - "验证数据库设计实施"
          - "检查API接口实现"
          - "分析任务分解和完成度"
        output: "story_completeness_report.json"

  # 第三阶段：覆盖度映射和差距分析
  phase_3_coverage_gap_analysis:
    name: "覆盖度映射和差距分析"
    duration: "5-8分钟"
    steps:
      - step: "map_requirements_to_stories"
        description: "需求到故事映射"
        actions:
          - "建立需求-用户故事映射关系"
          - "识别已实施的需求"
          - "识别未实施的需求"
          - "分析实施覆盖度"
        output: "coverage_mapping.json"

      - step: "identify_gaps_and_issues"
        description: "识别差距和问题"
        actions:
          - "识别需求覆盖差距"
          - "发现不一致的实施状态"
          - "分析质量问题"
          - "生成改进建议"
        output: "gaps_and_issues_report.json"

  # 第四阶段：生成综合审计报告
  phase_4_comprehensive_reporting:
    name: "生成综合审计报告"
    duration: "2-5分钟"
    steps:
      - step: "generate_coverage_report"
        description: "生成覆盖度报告"
        actions:
          - "计算整体覆盖度指标"
          - "生成需求实施矩阵"
          - "创建可视化图表"
          - "提供详细分析"
        output: "requirements_coverage_report.md"

      - step: "generate_action_plan"
        description: "生成行动计划"
        actions:
          - "优先级排序未实施需求"
          - "制定实施路线图"
          - "生成具体行动项"
          - "估算工作量"
        output: "implementation_action_plan.md"

# ========== 检查维度定义 ==========
audit_dimensions:
  # 维度1：需求覆盖度
  requirement_coverage:
    name: "需求覆盖度分析"
    metrics:
      - "总需求数量"
      - "已转化为用户故事的需求数量"
      - "覆盖度百分比"
      - "未覆盖需求清单"
    acceptance_criteria:
      minimum_coverage: 85 # 最低覆盖度85%
      critical_requirements_coverage: 100 # 关键需求100%覆盖

  # 维度2：用户故事完整性
  story_completeness:
    name: "用户故事完整性分析"
    checks:
      - "必需章节完整性"
      - "验收标准明确性"
      - "数据库设计完整性"
      - "API接口规范完整性"
      - "任务分解合理性"
    scoring:
      structure_completeness: 30 # 结构完整性权重30%
      content_quality: 40 # 内容质量权重40%
      implementation_detail: 30 # 实施细节权重30%

  # 维度3：实施状态准确性
  implementation_accuracy:
    name: "实施状态准确性验证"
    validations:
      - "状态声明与实际内容匹配度"
      - "QA结果的真实性"
      - "开发者记录的完整性"
      - "交付物的存在性"
    verification_methods:
      - "文档结构验证"
      - "内容完整性检查"
      - "实施证据验证"
      - "质量标准符合度"

  # 维度4：业务价值实现
  business_value_realization:
    name: "业务价值实现分析"
    assessments:
      - "关键功能实施状态"
      - "用户价值主张实现度"
      - "业务目标达成情况"
      - "ROI预期实现度"
    priority_analysis:
      - "高优先级需求实施率"
      - "核心功能完成度"
      - "用户体验改善程度"

# ========== 报告结构定义 ==========
report_structure:
  # 执行摘要
  executive_summary:
    sections:
      - "整体覆盖度概述"
      - "关键发现和问题"
      - "优先改进建议"
      - "实施状态评级"

  # 详细分析
  detailed_analysis:
    sections:
      - requirements_coverage_matrix:
          title: "需求覆盖度矩阵"
          content: "史诗-用户故事映射表"
      - story_completeness_analysis:
          title: "用户故事完整性分析"
          content: "每个故事的完整性评分"
      - implementation_status_review:
          title: "实施状态审查"
          content: "实施声明的验证结果"
      - gap_analysis:
          title: "差距分析"
          content: "未实施需求和改进机会"

  # 行动计划
  action_plan:
    sections:
      - "立即行动项"
      - "短期改进计划"
      - "长期完善建议"
      - "资源需求评估"

# ========== 质量检查规则 ==========
quality_check_rules:
  # 用户故事必需元素检查
  required_story_elements:
    - element: "用户故事格式"
      pattern: "^\\*\\*作为\\*\\*.*\\*\\*我希望\\*\\*.*\\*\\*以便\\*\\*.*"
      criticality: "HIGH"

    - element: "验收标准"
      minimum_count: 3
      format: "numbered_list"
      criticality: "HIGH"

    - element: "数据库设计相关"
      required_subsections: ["涉及的数据库实体", "数据操作清单", "业务规则约束"]
      criticality: "MEDIUM"

    - element: "API接口规范"
      required_subsections: ["API端点清单", "API详细设计", "数据映射关系"]
      criticality: "HIGH"

    - element: "开发者代理记录"
      required_subsections: ["使用的代理模型", "数据库实现记录", "API实现记录", "文件列表"]
      criticality: "LOW"

  # 实施状态验证规则
  implementation_status_rules:
    - status: "Completed"
      required_evidence:
        - "QA结果章节存在且非空"
        - "开发者代理记录完整"
        - "文件列表非空"
        - "所有验收标准有对应实施"

    - status: "InProgress"
      required_evidence:
        - "部分验收标准有实施记录"
        - "开发者代理记录存在"

    - status: "Draft"
      required_evidence:
        - "基本结构完整"

# ========== 输出格式 ==========
output_formats:
  # 主要报告
  primary_reports:
    - name: "requirements_coverage_audit_report"
      location: "audit-reports/"
      format: "COMPREHENSIVE_MARKDOWN"
      includes: ["executive_summary", "detailed_analysis", "recommendations"]

    - name: "implementation_gap_analysis"
      location: "audit-reports/"
      format: "STRUCTURED_MARKDOWN"
      includes: ["gap_matrix", "priority_ranking", "action_items"]

  # 数据文件
  data_exports:
    - name: "requirements_matrix"
      format: "JSON"
      description: "结构化需求映射数据"

    - name: "coverage_metrics"
      format: "JSON"
      description: "覆盖度指标数据"

    - name: "story_completeness_scores"
      format: "JSON"
      description: "用户故事完整性评分"

# ========== 成功标准 ==========
success_criteria:
  audit_completeness:
    - "所有PRD需求识别和分类"
    - "所有用户故事完整性评估"
    - "覆盖度映射100%完成"
    - "差距分析全面准确"

  report_quality:
    - "执行摘要清晰简明"
    - "分析数据准确可靠"
    - "改进建议具体可行"
    - "行动计划优先级明确"

  actionable_insights:
    - "识别具体的覆盖度差距"
    - "提供可执行的改进建议"
    - "制定合理的实施时间表"
    - "估算准确的工作量"

# ========== 使用示例 ==========
usage_examples:
  basic_audit: |
    # 执行完整的需求覆盖度审计
    *requirements-coverage-audit

  focused_audit: |
    # 专注于特定史诗的审计
    *coverage-audit --epic=史诗-1基础设施与核心文档展示

  status_verification: |
    # 验证用户故事状态准确性
    *story-validation --focus=implementation-status
