template:
  id: enhanced-story-with-database-template-v1
  name: 增强用户故事文档 (包含数据库和API设计)
  version: 1.0
  output:
    format: markdown
    filename: docs/stories/{{epic_num}}.{{story_num}}.{{story_title_short}}.md
    title: "story {{epic_num}}.{{story_num}}: {{story_title_short}}"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

agent_config:
  editable_sections:
    - Status
    - Story
    - Acceptance Criteria
    - Database Design
    - API Specifications
    - Tasks / Subtasks
    - Dev Notes
    - Testing
    - Change Log

sections:
  - id: status
    title: 状态
    type: choice
    choices: [Draft, Approved, InProgress, Review, Done]
    instruction: 选择此用户故事的当前状态
    owner: scrum-master
    editors: [scrum-master, po-agent, dev-agent]

  - id: story
    title: 用户故事
    type: template-text
    template: |
      **作为** {{role}}，
      **我希望** {{action}}，
      **以便** {{benefit}}
    instruction: 使用包含角色、行动和收益的标准格式来定义用户故事
    elicit: true
    owner: scrum-master
    editors: [scrum-master]

  - id: acceptance-criteria
    title: 验收标准
    type: numbered-list
    instruction: 从 Epic 文件中复制验收标准的编号列表
    elicit: true
    owner: scrum-master
    editors: [scrum-master]

  - id: database-design
    title: 数据库设计相关
    instruction: |
      基于database-architect生成的数据库设计，明确此用户故事涉及的数据库相关内容。
      从docs/database/database-design.md中提取相关信息。
    elicit: true
    owner: scrum-master
    editors: [scrum-master]
    sections:
      - id: related-entities
        title: 相关实体
        instruction: |
          列出此用户故事涉及的所有数据库实体（表）：
          - 实体名称
          - 表名
          - 主要用途
          - 关键字段
        template: |
          ### 涉及的数据库实体

          | 实体名称 | 表名 | 主要用途 | 关键字段 |
          |---------|------|----------|----------|
          | {{entity_name}} | {{table_name}} | {{purpose}} | {{key_fields}} |
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: data-operations
        title: 数据操作
        instruction: |
          明确此用户故事需要进行的数据操作：
          - 查询操作 (SELECT)
          - 插入操作 (INSERT)
          - 更新操作 (UPDATE)
          - 删除操作 (DELETE)
        template: |
          ### 数据操作清单

          **查询操作**:
          - [ ] {{query_description}} (表: {{table_name}})

          **插入操作**:
          - [ ] {{insert_description}} (表: {{table_name}})

          **更新操作**:
          - [ ] {{update_description}} (表: {{table_name}})

          **删除操作**:
          - [ ] {{delete_description}} (表: {{table_name}})
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: business-rules
        title: 业务规则约束
        instruction: |
          列出此用户故事涉及的数据业务规则和约束：
          - 数据验证规则
          - 外键约束
          - 唯一性约束
          - 业务逻辑约束
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

  - id: api-specifications
    title: API接口规范
    instruction: |
      基于database-architect创建的API设计，详细定义此用户故事涉及的API接口。
      每个接口必须包含完整的接口名称、入参、出参、传参示例和响应示例。
    elicit: true
    owner: scrum-master
    editors: [scrum-master]
    sections:
      - id: api-endpoints
        title: API端点列表
        instruction: |
          列出此用户故事需要实现或调用的所有API端点
        template: |
          ### API端点清单

          | 序号 | 接口名称 | HTTP方法 | 路径 | 说明 | 状态 |
          |------|----------|----------|------|------|------|
          | 1 | {{api_name}} | {{http_method}} | {{api_path}} | {{description}} | {{status}} |
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: api-details
        title: API详细设计
        instruction: |
          为每个API端点提供详细的接口设计，包括：
          - 接口名称和描述
          - 请求参数详细说明
          - 响应数据结构
          - 请求示例
          - 响应示例
          - 错误码定义
        template: |
          ### API详细设计

          #### {{api_name}}

          **接口描述**: {{api_description}}
          **HTTP方法**: {{http_method}}
          **请求路径**: {{api_path}}

          **请求参数**:
          ```json
          {
            "param1": "string // 参数说明",
            "param2": "integer // 参数说明",
            "param3": {
              "nested_param": "string // 嵌套参数说明"
            }
          }
          ```

          **响应数据结构**:
          ```json
          {
            "code": "integer // 状态码",
            "message": "string // 响应消息",
            "data": {
              "field1": "string // 字段说明",
              "field2": "integer // 字段说明"
            }
          }
          ```

          **请求示例**:
          ```bash
          curl -X {{http_method}} "{{base_url}}{{api_path}}" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer {{token}}" \
            -d '{
              "param1": "示例值",
              "param2": 123
            }'
          ```

          **成功响应示例**:
          ```json
          {
            "code": 200,
            "message": "操作成功",
            "data": {
              "field1": "返回值示例",
              "field2": 456
            }
          }
          ```

          **错误响应示例**:
          ```json
          {
            "code": 400,
            "message": "参数错误",
            "data": null
          }
          ```

          **错误码定义**:
          | 错误码 | 说明 | 处理建议 |
          |--------|------|----------|
          | 400 | 参数错误 | 检查请求参数格式 |
          | 401 | 未授权 | 检查token有效性 |
          | 404 | 资源不存在 | 检查资源ID |
          | 500 | 服务器错误 | 联系技术支持 |
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: data-mapping
        title: 数据映射关系
        instruction: |
          定义API参数与数据库字段的映射关系
        template: |
          ### 数据映射关系

          #### 请求参数 -> 数据库字段映射
          | API参数 | 数据库表 | 数据库字段 | 数据类型 | 说明 |
          |---------|----------|------------|----------|------|
          | {{api_param}} | {{table_name}} | {{db_field}} | {{data_type}} | {{description}} |

          #### 数据库字段 -> 响应参数映射
          | 数据库表 | 数据库字段 | API响应字段 | 数据类型 | 说明 |
          |----------|------------|-------------|----------|------|
          | {{table_name}} | {{db_field}} | {{api_field}} | {{data_type}} | {{description}} |
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

  - id: tasks-subtasks
    title: 任务 / 子任务
    type: bullet-list
    instruction: |
      将用户故事分解为实施所需的具体任务和子任务。
      在相关处引用适用的验收标准编号。
      结合数据库设计和API规范，确保任务覆盖：
      - 数据库相关操作（Mapper、Service层）
      - API接口实现（Controller层）
      - 数据验证和业务逻辑
      - 单元测试和集成测试
    template: |
      ### 后端开发任务
      - [ ] 数据库相关 (AC: # 如果适用)
        - [ ] 实现{{entity_name}}Mapper接口方法
        - [ ] 编写{{entity_name}}Service业务逻辑
        - [ ] 添加数据验证和业务规则
      - [ ] API接口实现 (AC: # 如果适用)
        - [ ] 实现{{api_name}}接口 ({{http_method}} {{api_path}})
        - [ ] 添加请求参数验证
        - [ ] 实现响应数据格式化
        - [ ] 添加异常处理和错误码
      - [ ] 测试相关 (AC: # 如果适用)
        - [ ] 编写Service层单元测试
        - [ ] 编写API接口集成测试
        - [ ] 数据库操作测试
        - [ ] 边界条件和异常测试

      ### 前端开发任务（如果需要）
      - [ ] 前端界面 (AC: # 如果适用)
        - [ ] 实现相关页面组件
        - [ ] 集成API调用
        - [ ] 添加表单验证
        - [ ] 用户交互和反馈
    elicit: true
    owner: scrum-master
    editors: [scrum-master, dev-agent]

  - id: dev-notes
    title: 开发者说明
    instruction: |
      填充相关信息，且仅限从 docs 文件夹中的实际工件中提取的、与此用户故事相关的内容：
      - 数据库设计文档的相关部分
      - 生成的Entity、Mapper、Service代码位置
      - API接口设计的相关规范
      - 架构设计中的相关约束
      - 与前一个用户故事的关联信息
      在此部分提供足够的信息，以确保开发者代理永远不需要阅读完整的设计文档。
    elicit: true
    owner: scrum-master
    editors: [scrum-master]
    sections:
      - id: database-context
        title: 数据库上下文
        instruction: |
          提供数据库相关的开发上下文：
          - 相关实体类的位置和结构
          - Mapper接口需要实现的方法
          - Service层的业务逻辑要求
          - 数据验证规则
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: api-context
        title: API接口上下文
        instruction: |
          提供API接口相关的开发上下文：
          - Controller类的位置和结构
          - 接口路径和HTTP方法
          - 请求响应的数据格式
          - 错误处理要求
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: integration-context
        title: 集成上下文
        instruction: |
          提供系统集成相关的开发上下文：
          - 与其他模块的接口依赖
          - 外部系统调用要求
          - 缓存策略
          - 事务处理要求
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

      - id: testing-standards
        title: 测试
        instruction: |
          列出开发者需要遵守的、源自架构文档的相关测试标准：
          - 测试文件位置
          - 测试标准
          - 要使用的测试框架和模式
          - 针对此用户故事的特定测试要求
          - 数据库测试和API测试要求
        elicit: true
        owner: scrum-master
        editors: [scrum-master]

  - id: change-log
    title: 变更日志
    type: table
    columns: [日期, 版本, 描述, 作者]
    instruction: 跟踪此用户故事文档的变更
    owner: scrum-master
    editors: [scrum-master, dev-agent, qa-agent]

  - id: dev-agent-record
    title: 开发者代理记录
    instruction: 此部分由开发代理在实施过程中填充
    owner: dev-agent
    editors: [dev-agent]
    sections:
      - id: agent-model
        title: 使用的代理模型
        template: "{{agent_model_name_version}}"
        instruction: 记录用于开发的特定 AI 代理模型和版本
        owner: dev-agent
        editors: [dev-agent]

      - id: database-implementation
        title: 数据库实现记录
        instruction: |
          记录数据库相关的实现细节：
          - 实现的Mapper方法
          - Service层业务逻辑
          - 数据验证实现
          - 数据库测试结果
        owner: dev-agent
        editors: [dev-agent]

      - id: api-implementation
        title: API实现记录
        instruction: |
          记录API接口的实现细节：
          - 实现的Controller方法
          - 参数验证逻辑
          - 响应格式处理
          - 错误处理实现
          - API测试结果
        owner: dev-agent
        editors: [dev-agent]

      - id: debug-log-references
        title: 调试日志参考
        instruction: 引用开发过程中生成的任何调试日志或跟踪信息
        owner: dev-agent
        editors: [dev-agent]

      - id: completion-notes
        title: 完成说明列表
        instruction: 关于任务完成情况和遇到的任何问题的说明
        owner: dev-agent
        editors: [dev-agent]

      - id: file-list
        title: 文件列表
        instruction: |
          列出在用户故事实施过程中创建、修改或影响的所有文件，
          特别注意数据库和API相关文件：
          - Entity类文件
          - Mapper接口和XML文件
          - Service接口和实现文件
          - Controller文件
          - 测试文件
        owner: dev-agent
        editors: [dev-agent]

  - id: qa-results
    title: QA 结果
    instruction: |
      QA 代理对已完成的用户故事实施进行 QA 审查的结果，
      特别关注：
      - 数据库操作的正确性
      - API接口的功能性
      - 数据一致性验证
      - 性能测试结果
    owner: qa-agent
    editors: [qa-agent]
