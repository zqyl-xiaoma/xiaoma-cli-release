template:
  id: prd-template-v2
  name: 产品需求文档
  version: 2.0
  output:
    format: markdown
    filename: docs/prd.md
    title: "{{project_name}} Product Requirements Document (PRD)"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: goals-context
    title: 目标与背景上下文
    instruction: |
      询问“项目简报”文档是否可用。如果不存在“项目简报”，强烈建议首先使用 project-brief-tmpl 创建一个（它提供了必要的基础：问题陈述、目标用户、成功指标、MVP 范围、约束条件）。如果用户坚持在没有简报的情况下编写 PRD，请在“目标”部分收集这些信息。如果“项目简报”存在，请审阅并用它来填充“目标”（期望成果的项目符号列表）和“背景上下文”（1-2 段关于此项目解决什么问题及其原因的说明），以便我们能确定 PRD MVP 的范围内外事项。无论哪种方式，这对于确定需求都至关重要。请包含“变更日志”表格。
    sections:
      - id: goals
        title: 目标
        type: bullet-list
        instruction: 以项目符号列表形式，每行一个，列出 PRD 成功后将交付的预期成果——用户和项目的期望。
      - id: background
        title: 背景上下文
        type: paragraphs
        instruction: 用 1-2 个简短段落总结背景上下文，例如我们在项目简报中学到了什么（避免与目标重复），这个项目解决什么问题以及为什么，当前的行业状况或需求是什么。
      - id: changelog
        title: 变更日志
        type: table
        columns: [日期, 版本, 描述, 作者]
        instruction: 跟踪文档版本和变更

  - id: requirements
    title: 需求
    instruction: 在两个子部分下起草功能性和非功能性需求列表。
    elicit: true
    sections:
      - id: functional
        title: 功能性需求
        type: numbered-list
        prefix: FR
        instruction: 每个需求将是一个 Markdown 项目符号，并带有一个以 FR 开头的标识符序列。
        examples:
          - "FR6: 待办事项列表使用 AI 检测并警告措辞不同但可能重复的待办事项。"
      - id: non-functional
        title: 非功能性需求
        type: numbered-list
        prefix: NFR
        instruction: 每个需求将是一个 Markdown 项目符号，并带有一个以 NFR 开头的标识符序列。
        examples:
          - "NFR1: 在可行的情况下，AWS 服务的使用必须力求保持在免费套餐限制内。"

  - id: ui-goals
    title: 用户界面设计目标
    condition: PRD 包含 UX/UI 需求时
    instruction: |
      捕获高层次的 UI/UX 愿景，以指导设计架构师并为创建用户故事提供信息。步骤：

      1. 基于项目上下文，用有根据的猜测预先填充所有子部分。
      2. 将渲染后的完整部分呈现给用户。
      3. 清晰地告知用户哪些地方做了假设。
      4. 针对不清晰/缺失的元素或需要更具体说明的领域提出有针对性的问题。
      5. 这不是详细的 UI 规范——重点关注产品愿景和用户目标。
    elicit: true
    choices:
      accessibility: [无, WCAG AA, WCAG AAA]
      platforms: [响应式网页, 仅移动端, 仅桌面端, 跨平台]
    sections:
      - id: ux-vision
        title: 整体 UX 愿景
      - id: interaction-paradigms
        title: 关键交互范式
      - id: core-screens
        title: 核心屏幕与视图
        instruction: 从产品角度看，为实现 PRD 的价值和目标，最关键的屏幕或视图是什么？这旨在提供概念性的高层概览，以驱动粗略的史诗或用户故事。
        examples:
          - "登录屏幕"
          - "主仪表盘"
          - "项目详情页"
          - "设置页面"
      - id: accessibility
        title: "无障碍性: {无|WCAG AA|WCAG AAA|自定义要求}"
      - id: branding
        title: 品牌
        instruction: 是否有任何已知的品牌元素或风格指南必须被整合进来？
        examples:
          - "复制 20 世纪初黑白电影的观感，包括在页面或状态转换期间模拟胶片损坏或投影仪故障的动画效果。"
          - "附件是我司品牌的全套调色板和设计元素。"
      - id: target-platforms
        title: "目标设备与平台: {响应式网页|仅移动端|仅桌面端|跨平台}"
        examples:
          - "响应式网页，以及所有移动平台"
          - "仅限 iPhone"
          - "ASCII 码 Windows 桌面"

  - id: technical-assumptions
    title: 技术假设
    instruction: |
      收集将指导架构师的技术决策。步骤：

      1. 检查 {root}/data/technical-preferences.yaml 或附加的技术偏好文件是否存在——用它来预填充选项。
      2. 询问用户关于：语言、框架、启动模板、库、API、部署目标。
      3. 对于未知项，根据项目目标和 MVP 范围提供指导。
      4. 记录所有技术选择及其理由（为什么这个选择适合该项目）。
      5. 这些将成为架构师的约束条件——务必具体和完整。
    elicit: true
    choices:
      repository: [Monorepo, Polyrepo]
      architecture: [Monolith, Microservices, Serverless]
      testing: [仅单元测试, 单元+集成测试, 完整测试金字塔]
    sections:
      - id: repository-structure
        title: "代码仓库结构: {Monorepo|Polyrepo|Multi-repo}"
      - id: service-architecture
        title: 服务架构
        instruction: "关键决策 - 记录高层服务架构（例如，Monolith, Microservices, Monorepo 内的 Serverless 函数）。"
      - id: testing-requirements
        title: 测试要求
        instruction: "关键决策 - 记录测试要求（仅单元测试、集成测试、e2e 测试、手动测试，以及是否需要方便手动测试的方法）。"
      - id: additional-assumptions
        title: 其他技术假设与请求
        instruction: 在起草本文档的整个过程中，如果提出或发现任何其他适合架构师的技术假设，请在此处作为额外的项目符号添加。

  - id: epic-list
    title: 史诗列表
    instruction: |
      向用户呈现一份高层次的史诗列表以供批准。每个史诗应有一个标题和一个简短的（1句话）目标陈述。这使用户能在深入细节之前审阅整体结构。

      关键：史诗必须遵循敏捷最佳实践，保持逻辑上的顺序：

      - 每个史诗都应交付一个重要的、端到端的、完全可部署且可测试的功能增量。
      - 史诗 1 必须建立基础项目设施（应用设置、Git、CI/CD、核心服务），除非我们是向现有应用添加新功能。同时，它还应交付一个初始功能，即使只是一个健康检查路由或一个简单的金丝雀页面显示——在为第一个史诗编写用户故事时要记住这一点！
      - 每个后续的史诗都在之前史诗功能的基础上构建，交付主要的功能模块，这些模块在部署时能为用户或业务提供切实的价值。
      - 并非每个项目都需要多个史诗，一个史诗需要交付价值。例如，一个已完成的 API 即使 UI 尚未完成并计划在另一个史诗中实现，也可以交付价值。
      - 倾向于设置较少的史诗，但要告知用户你的理由，并提供拆分选项，如果某些史诗看起来太大或关注点分散的话。
      - 横切关注点应该贯穿于史诗和用户故事中，而不是作为最后的用户故事。例如，在一个史诗的最后一个故事中添加日志框架，或者在项目结束时作为最后一个史诗或故事来做，这将非常糟糕，因为我们从一开始就没有日志记录。
    elicit: true
    examples:
      - "史诗 1：基础与核心设施：建立项目设置、认证和基本用户管理"
      - "史诗 2：核心业务实体：创建和管理主要领域对象的 CRUD 操作"
      - "史诗 3：用户工作流与交互：实现关键用户旅程和业务流程"
      - "史诗 4：报告与分析：为用户提供洞察和数据可视化"

  - id: epic-details
    title: 史诗 {{epic_number}} {{epic_title}}
    repeatable: true
    instruction: |
      在史诗列表被批准后，将每个史诗及其所有的用户故事和验收标准作为一个完整的审查单元呈现。

      为每个史诗提供扩展的目标（2-3 句话描述所有故事将实现的目标和价值）。

      关键的用户故事排序要求：

      - 每个史诗中的用户故事必须在逻辑上是顺序的。
      - 每个故事都应该是一个“垂直切片”，交付完整的功能，除了项目基础的早期使能型故事。
      - 任何故事都不应依赖于后续故事或史诗的工作。
      - 识别并注明任何直接的前置故事。
      - 关注“做什么”和“为什么”，而不是“怎么做”（将技术实现留给架构师），但要足够精确以支持故事之间逻辑上顺序的操作。
      - 确保每个故事都交付明确的用户或业务价值，尽量避免使能型故事，而是将它们构建到交付价值的故事中。
      - 为 AI 代理执行调整故事的大小：每个故事必须能由单个 AI 代理在一次专注的会话中完成，而不会出现上下文溢出。
      - 想象一个“初级开发人员工作 2-4 小时”的场景——故事必须是小型的、专注的、自包含的。
      - 如果一个故事看起来很复杂，只要它能交付一个垂直切片，就应进一步拆分。
    elicit: true
    template: "{{epic_goal}}"
    sections:
      - id: story
        title: 用户故事 {{epic_number}}.{{story_number}} {{story_title}}
        repeatable: true
        template: |
          作为一名 {{user_type}}，
          我想要 {{action}}，
          以便 {{benefit}}。
        sections:
          - id: acceptance-criteria
            title: 验收标准
            type: numbered-list
            item_template: "{{criterion_number}}: {{criteria}}"
            repeatable: true
            instruction: |
              定义清晰、全面且可测试的验收标准，这些标准应：

              - 从功能角度精确定义“完成”的含义。
              - 明确无歧义，并作为验证的基础。
              - 包括来自 PRD 的任何关键非功能性需求。
              - 考虑后端/数据组件的本地可测试性。
              - 在适用时，指定 UI/UX 需求和框架遵循情况。
              - 避免应放在其他故事或 PRD 部分的横切关注点。

  - id: checklist-results
    title: 检查清单结果报告
    instruction: 在运行检查清单和起草提示之前，提议输出更新后的完整 PRD。如果输出，请与用户确认你将继续运行检查清单并生成报告。一旦用户确认，执行 pm-checklist 并在此部分填充结果。

  - id: next-steps
    title: 后续步骤
    sections:
      - id: ux-expert-prompt
        title: UX 专家提示
        instruction: 此部分将包含给 UX 专家的提示，保持简短扼要，以启动使用本文档作为输入的架构创建模式。
      - id: architect-prompt
        title: 架构师提示
        instruction: 此部分将包含给架构师的提示，保持简短扼要，以启动使用本文档作为输入的架构创建模式。
