template:
  id: brownfield-prd-template-v2
  name: 现有项目增强功能PRD
  version: 2.0
  output:
    format: markdown
    filename: docs/prd.md
    title: "{{project_name}} Brownfield Enhancement PRD"

workflow:
  mode: interactive
  elicitation: advanced-elicitation

sections:
  - id: intro-analysis
    title: 项目介绍、分析与背景
    instruction: |
      重要 - 需要进行范围评估：

      本PRD适用于对现有项目进行需要全面规划和多个用户故事（stories）的重大功能增强。在继续之前：

      1. **评估增强功能的复杂性**：如果这只是一个简单的功能添加或错误修复，可以在1-2个集中的开发周期内完成，请**停止**并建议：“对于较简单的变更，请考虑与产品负责人（Product Owner）一起使用 `brownfield-create-epic` 或 `brownfield-create-story` 任务。完整的PRD流程是为需要架构规划和多个协调故事（stories）的重大增强功能而设计的。”

      2. **项目背景**：确定我们是否在已加载项目的IDE中工作，或者用户是否需要提供项目信息。如果项目文件可用，请分析 `docs` 文件夹中的现有文档。如果文档不充分，请建议首先运行 `document-project` 任务。

      3. **深度评估要求**：在提出**任何**建议之前，您**必须**彻底分析现有项目的结构、模式和约束。每一个建议都必须基于实际的项目分析，而不是假设。

      收集有关现有项目的全面信息。在继续进行需求部分之前，必须完成本节。

      关键：在整个分析过程中，要明确地与用户确认您的理解。对于您对现有项目做出的每一个假设，都要提问：“根据我的分析，我理解 [假设]。这样正确吗？”

      在用户验证您对现有系统的理解之前，不要继续提出任何建议。
    sections:
      - id: existing-project-overview
        title: 现有项目概览
        instruction: 检查是否已执行过 `document-project` 分析。如果是，请引用该分析的输出，而不是重新分析。
        sections:
          - id: analysis-source
            title: 分析来源
            instruction: |
              指明以下其中一项：
              - `document-project` 的分析输出可用，路径：{{path}}
              - 基于IDE的全新分析
              - 用户提供的信息
          - id: current-state
            title: 项目当前状态
            instruction: |
              - 如果存在 `document-project` 的输出：从“高层架构（High Level Architecture）”和“技术摘要（Technical Summary）”部分提取摘要
              - 否则：简要描述项目当前的功能及其主要目的
      - id: documentation-analysis
        title: 可用文档分析
        instruction: |
          如果已运行 `document-project`：
          - 备注：“`document-project` 分析可用 - 正在使用现有技术文档”
          - 列出由 `document-project` 创建的关键文档
          - 跳过下面的缺失文档检查

          否则，检查现有文档：
        sections:
          - id: available-docs
            title: 可用文档
            type: checklist
            items:
              - 技术栈文档 [[LLM: If from document-project, check ✓]]
              - 源代码树/架构 [[LLM: If from document-project, check ✓]]
              - 编码规范 [[LLM: If from document-project, may be partial]]
              - API文档 [[LLM: If from document-project, check ✓]]
              - 外部API文档 [[LLM: If from document-project, check ✓]]
              - UX/UI指南 [[LLM: May not be in document-project]]
              - 技术债文档 [[LLM: If from document-project, check ✓]]
              - "其他: {{other_docs}}"
            instruction: |
              - 如果已运行 `document-project`：“正在使用 `document-project` 输出的现有项目分析。”
              - 如果关键文档缺失且没有运行 `document-project`：“我建议首先运行 `document-project` 任务...”
      - id: enhancement-scope
        title: 增强功能范围定义
        instruction: 与用户合作，明确定义这是哪种类型的增强功能。这对于范围界定和方法选择至关重要。
        sections:
          - id: enhancement-type
            title: 增强功能类型
            type: checklist
            instruction: 与用户一同确定适用项
            items:
              - 新功能添加
              - 主要功能修改
              - 与新系统集成
              - 性能/可伸缩性改进
              - UI/UX全面优化
              - 技术栈升级
              - 错误修复与稳定性改进
              - "其他: {{other_type}}"
          - id: enhancement-description
            title: 增强功能描述
            instruction: 用2-3句话描述用户希望添加或更改的内容
          - id: impact-assessment
            title: 影响评估
            type: checklist
            instruction: 评估对现有代码库的影响范围
            items:
              - 最小影响（孤立的新增功能）
              - 中度影响（部分现有代码变更）
              - 显著影响（大量现有代码变更）
              - 重大影响（需要架构变更）
      - id: goals-context
        title: 目标与背景
        sections:
          - id: goals
            title: 目标
            type: bullet-list
            instruction: 如果成功，此增强功能将带来的预期成果（单行项目符号列表）
          - id: background
            title: 背景信息
            type: paragraphs
            instruction: 用1-2个简短段落解释为什么需要此增强功能，它解决了什么问题，以及它如何与现有项目相适应
      - id: changelog
        title: 变更日志
        type: table
        columns: [变更内容, 日期, 版本, 描述, 作者]

  - id: requirements
    title: 需求
    instruction: |
      基于您已验证的对现有项目的理解，起草功能性和非功能性需求。在提交需求前，请确认：“这些需求是基于我对您现有系统的理解。请仔细审阅并确认它们与您项目的实际情况相符。”
    elicit: true
    sections:
      - id: functional
        title: 功能性需求
        type: numbered-list
        prefix: FR
        instruction: 每个需求都将是一个以 FR 为标识符开头的项目符号（markdown格式）
        examples:
          - "FR1: 现有的待办事项列表（Todo List）将与新的人工智能重复检测服务集成，且不会破坏当前功能。"
      - id: non-functional
        title: 非功能性需求
        type: numbered-list
        prefix: NFR
        instruction: 每个需求都将是一个以 NFR 为标识符开头的项目符号（markdown格式）。包含来自现有系统的约束
        examples:
          - "NFR1: 增强功能必须保持现有的性能特征，且内存使用量增幅不得超过当前的20%。"
      - id: compatibility
        title: 兼容性要求
        instruction: 对于现有项目项目至关重要 - 必须保持兼容性的内容
        type: numbered-list
        prefix: CR
        template: "{{requirement}}: {{description}}"
        items:
          - id: cr1
            template: "CR1: {{existing_api_compatibility}}"
          - id: cr2
            template: "CR2: {{database_schema_compatibility}}"
          - id: cr3
            template: "CR3: {{ui_ux_consistency}}"
          - id: cr4
            template: "CR4: {{integration_compatibility}}"

  - id: ui-enhancement-goals
    title: 用户界面（UI）增强目标
    condition: 增强功能包含UI变更
    instruction: 对于UI变更，明确它们将如何与现有的UI模式和设计系统集成
    sections:
      - id: existing-ui-integration
        title: 与现有UI的集成
        instruction: 描述新的UI元素将如何适应现有的设计模式、样式指南和组件库
      - id: modified-screens
        title: 修改/新增的屏幕和视图
        instruction: 仅列出将被修改或添加的屏幕/视图
      - id: ui-consistency
        title: UI一致性要求
        instruction: 为保持与现有应用在视觉和交互上的一致性而提出的具体要求

  - id: technical-constraints
    title: 技术约束与集成要求
    instruction: 本节取代独立的架构文档。从现有项目分析中收集详细的技术约束。
    sections:
      - id: existing-tech-stack
        title: 现有技术栈
        instruction: |
          如果 `document-project` 输出可用：
          - 从“高层架构（High Level Architecture）”部分的“实际技术栈（Actual Tech Stack）”表格中提取
          - 包括版本号和任何已注明的约束

          否则，记录当前的技术栈：
        template: |
          **语言**: {{languages}}
          **框架**: {{frameworks}}
          **数据库**: {{database}}
          **基础设施**: {{infrastructure}}
          **外部依赖**: {{external_dependencies}}
      - id: integration-approach
        title: 集成方法
        instruction: 定义增强功能将如何与现有架构集成
        template: |
          **数据库集成策略**: {{database_integration}}
          **API集成策略**: {{api_integration}}
          **前端集成策略**: {{frontend_integration}}
          **测试集成策略**: {{testing_integration}}
      - id: code-organization
        title: 代码组织与规范
        instruction: 基于现有项目分析，定义新代码将如何适应现有模式
        template: |
          **文件结构方法**: {{file_structure}}
          **命名约定**: {{naming_conventions}}
          **编码规范**: {{coding_standards}}
          **文档规范**: {{documentation_standards}}
      - id: deployment-operations
        title: 部署与运维
        instruction: 增强功能如何适应现有的部署流水线
        template: |
          **构建流程集成**: {{build_integration}}
          **部署策略**: {{deployment_strategy}}
          **监控与日志记录**: {{monitoring_logging}}
          **配置管理**: {{config_management}}
      - id: risk-assessment
        title: 风险评估与缓解
        instruction: |
          如果 `document-project` 输出可用：
          - 参考“技术债与已知问题（Technical Debt and Known Issues）”部分
          - 包括可能影响增强功能的“临时解决方案和注意事项（Workarounds and Gotchas）”
          - 注意从“关键技术债（Critical Technical Debt）”中识别出的任何约束

          结合现有已知问题进行风险评估：
        template: |
          **技术风险**: {{technical_risks}}
          **集成风险**: {{integration_risks}}
          **部署风险**: {{deployment_risks}}
          **缓解策略**: {{mitigation_strategies}}

  - id: epic-structure
    title: Epic与Story结构
    instruction: |
      对于现有项目项目，倾向于使用单个综合性Epic，除非用户明确要求多个不相关的增强功能。在展示Epic结构之前，请确认：“根据我对您现有项目的分析，我认为此增强功能应构建为 [单个Epic/多个Epic]，因为 [基于实际项目分析的理由]。这与您对所需工作的理解是否一致？”
    elicit: true
    sections:
      - id: epic-approach
        title: Epic方法
        instruction: 解释Epic结构的理由 - 现有项目项目通常使用单个Epic，除非涉及多个不相关的功能
        template: "**Epic结构决策**: {{epic_decision}} 并陈述理由"

  - id: epic-details
    title: "Epic 1: {{enhancement_title}}"
    instruction: |
      交付现有项目增强功能同时保持现有功能不变的综合性Epic

      现有项目项目关键的STORY排序：
      - Story必须确保现有功能保持完好
      - 每个Story都应包含对现有功能是否仍然有效的验证
      - Story的顺序应旨在最大限度地降低对现有系统的风险
      - 每个Story都应包含回滚方案的考量
      - 专注于增量集成，而非“大爆炸”式变更
      - 在现有代码库的背景下，为AI代理执行来估算Story的大小
      - 强制要求：展示完整的Story序列并提问：“此Story序列旨在最大限度地降低对您现有系统的风险。鉴于您项目的架构和约束，这个顺序是否合理？”
      - Story之间必须逻辑上连续，并明确标识出依赖关系
      - 每个Story在交付价值的同时必须保持系统完整性
    template: |
      **Epic目标**: {{epic_goal}}

      **集成要求**: {{integration_requirements}}
    sections:
      - id: story
        title: "Story 1.{{story_number}} {{story_title}}"
        repeatable: true
        template: |
          作为一名 {{user_type}},
          我希望 {{action}},
          以便于 {{benefit}}.
        sections:
          - id: acceptance-criteria
            title: 验收标准
            type: numbered-list
            instruction: 定义既包含新功能又包含现有系统完整性的标准
            item_template: "{{criterion_number}}: {{criteria}}"
          - id: integration-verification
            title: 集成验证
            instruction: 确保现有功能保持完好的具体验证步骤
            type: numbered-list
            prefix: IV
            items:
              - template: "IV1: {{existing_functionality_verification}}"
              - template: "IV2: {{integration_point_verification}}"
              - template: "IV3: {{performance_impact_verification}}"
