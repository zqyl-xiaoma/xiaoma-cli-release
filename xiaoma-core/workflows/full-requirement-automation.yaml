# <!-- Powered by XIAOMA™ Core -->
# Ultimate Full Requirement Automation Workflow - 终极全需求自动化工作流
# 集成增强串行执行和闭环质量保证系统

workflow:
  id: full-requirement-automation
  name: Ultimate Full Requirement Automation with Closed-Loop QA
  version: "3.0.0"
  description: >-
    终极全自动化端到端需求交付工作流，采用严格串行执行模式，集成闭环质量保证系统。
    从需求分析到最终交付的完全自动化解决方案，确保零人工干预、零缺陷交付。
    特色：全局需求审计、智能问题分发、自动化修复验证、持续质量改进、串行质量保证。
    核心原则：质量优先、串行执行、依赖验证、持续验证、零缺陷交付、端到端自动化。
  type: ultimate-automation
  # 项目类型支持
  project_types:
    - web-app
    - saas
    - enterprise-app
    - data-driven-app
    - api-first
    - mission-critical-system
    - full-stack-automation

  # 工作流分类和标签
  category: ultimate-project-automation
  tags:
    - full-automation
    - serial-execution
    - closed-loop-qa
    - zero-intervention
    - end-to-end-delivery
    - quality-assurance

# ========== 智能体生态系统 ==========
agents:
  # 主控制器
  master_orchestrator:
    agent: master-execution-engine
    role: 终极工作流总控制器
    responsibilities:
      - 端到端流程编排
      - 质量门控管理
      - 串行执行协调
      - 全局状态监控
      - 交付物生成

  # 增强工作流编排器
  enhanced_orchestrator:
    agent: enhanced-workflow-orchestrator
    role: 增强工作流编排器
    responsibilities:
      - 任务规划和依赖管理
      - 串行处理优化
      - 回滚和恢复机制
      - 质量门控执行

  # 全局需求审计器
  global_auditor:
    agent: global-requirements-auditor
    role: 全局需求审计器
    responsibilities:
      - 全面需求覆盖审计
      - 质量评估和验证
      - 问题识别和分析
      - 改进建议生成

  # 智能问题分发器
  issue_dispatcher:
    agent: issue-dispatcher
    role: 智能问题分发器
    responsibilities:
      - 问题接收和分析
      - 智能分类和路由
      - 修复任务分发
      - 状态跟踪管理

  # 自动化修复验证器
  fix_validator:
    agent: automated-fix-validator
    role: 自动化修复验证器
    responsibilities:
      - 多层修复验证
      - 回归测试执行
      - 质量标准确认
      - 修复决策制定

  # 核心角色智能体
  role_agents:
    - agent: analyst
      role: 业务分析师
    - agent: pm
      role: 产品经理
    - agent: database-architect
      role: 数据库架构师
    - agent: ux-expert
      role: 用户体验专家
    - agent: architect
      role: 系统架构师
    - agent: po
      role: 产品负责人
    - agent: sm
      role: 敏捷教练
    - agent: dev
      role: 开发工程师
    - agent: qa
      role: 质量保证工程师
    - agent: devops
      role: 运维工程师

# ========== 终极执行序列 ==========
ultimate_sequence:
  # ===== 超级阶段1：智能需求分析与设计 =====
  mega_phase_1_intelligent_analysis:
    name: "智能需求分析与设计"
    duration: "45-75分钟"
    execution_mode: "strict_sequential"
    description: "从零开始的完整需求分析和设计，确保100%覆盖和质量"

    steps:
      # 1.1 项目发现与概要分析
      - step: project_discovery
        agent: analyst
        action: comprehensive_project_analysis
        creates: project-brief.md
        optional_steps:
          - brainstorming_session
          - market_research_prompt
          - stakeholder_analysis
        quality_gates:
          - completeness_check
          - feasibility_validation
          - 100_percent_completion_validated
        success_criteria:
          - project_brief_quality_score: ">95"
          - completeness_percentage: "100%"
          - feasibility_confirmed: true
          - stakeholder_alignment: "100%"
        wait_for_completion: true
        timeout: 1800
        notes: "全面项目发现和分析 - 必须100%完成"

      # 1.2 产品需求深度分析
      - step: prd_creation
        agent: pm
        action: create_comprehensive_prd
        creates: prd.md
        requires: project-brief.md
        wait_for_previous: true
        quality_gates:
          - requirement_completeness
          - measurability_check
          - priority_validation
          - business_value_validation
          - 100_percent_completion_validated
        success_criteria:
          - prd_quality_score: ">98"
          - requirement_coverage: "100%"
          - priority_alignment: "100%"
          - business_value_score: ">90"
        dependency_validation:
          - verify_project_brief_completed
          - validate_previous_quality_gates
        timeout: 2400
        notes: "创建企业级产品需求文档 - 依赖项目概要完成"

      # 1.3 现有系统分析（如果需要）
      - step: existing_system_analysis
        agent: database-architect
        action: analyze_existing_infrastructure
        creates: existing-system-analysis.md
        condition: has_existing_system
        requires: prd.md
        quality_gates:
          - system_completeness_check
          - integration_feasibility_check
        timeout: 1200
        notes: "分析现有系统和基础设施"

      # 1.4 数据库架构设计
      - step: database_design
        agent: database-architect
        action: design_complete_database_architecture
        creates: database-design.md
        requires:
          - prd.md
          - existing-system-analysis.md (if exists)
        wait_for_previous: true
        quality_gates:
          - normalization_check
          - performance_optimization
          - scalability_validation
          - security_compliance_check
          - 100_percent_completion_validated
        success_criteria:
          - database_design_quality_score: ">95"
          - normalization_compliance: "100%"
          - performance_requirements_met: true
          - security_score: ">95"
        dependency_validation:
          - verify_prd_completed
          - validate_existing_analysis_if_required
        timeout: 2100
        notes: "企业级数据库架构设计 - 依赖PRD完成"

      # 1.5 数据库脚本和代码生成
      - step: database_code_generation
        agent: database-architect
        action: generate_complete_database_assets
        creates:
          - database-scripts/
          - generated-code/
        requires: database-design.md
        wait_for_previous: true
        quality_gates:
          - syntax_validation
          - code_generation_validation
          - naming_convention_check
          - performance_optimization_check
        success_criteria:
          - code_quality_score: ">90"
          - script_syntax_validation: "100%"
          - naming_compliance: "100%"
        timeout: 1500
        notes: "生成完整数据库资产（脚本、实体、映射器）"

      # 1.6 用户体验设计
      - step: ux_design
        agent: ux-expert
        action: create_comprehensive_ux_design
        creates: front-end-spec.md
        requires:
          - prd.md
          - database-design.md
        wait_for_previous: true
        quality_gates:
          - usability_validation
          - accessibility_check
          - responsive_design_validation
          - user_journey_completeness
        success_criteria:
          - ux_quality_score: ">90"
          - accessibility_compliance: "100%"
          - user_journey_coverage: "100%"
        timeout: 1800
        notes: "全面用户体验设计 - 依赖PRD和数据库设计"

      # 1.7 系统架构设计
      - step: system_architecture
        agent: architect
        action: design_complete_system_architecture
        creates: fullstack-architecture.md
        requires:
          - prd.md
          - database-design.md
          - front-end-spec.md
        wait_for_previous: true
        quality_gates:
          - architecture_completeness
          - scalability_design
          - security_architecture
          - integration_architecture
          - performance_architecture
        success_criteria:
          - architecture_quality_score: ">95"
          - scalability_rating: ">90"
          - security_rating: ">95"
          - integration_score: ">90"
        timeout: 2400
        notes: "企业级全栈系统架构设计"

    # 阶段1质量门控
    phase_quality_gates:
      - gate: design_phase_completeness
        criteria: "所有设计文档100%完成"
      - gate: cross_document_consistency
        criteria: "所有文档间一致性验证通过"
      - gate: technical_feasibility
        criteria: "技术可行性100%确认"
      - gate: business_alignment
        criteria: "业务需求100%对齐"

  # ===== 超级阶段2：7层质量验证与调整 =====
  mega_phase_2_quality_validation:
    name: "7层质量验证与调整"
    duration: "30-45分钟"
    execution_mode: "strict_sequential"
    description: "企业级7层质量验证系统，确保零质量缺陷"

    steps:
      # 2.1 产品负责人全面验证
      - step: po_comprehensive_validation
        agent: po
        action: execute_7_layer_validation
        validates: all_design_artifacts
        uses: po-master-checklist
        quality_gates:
          - layer_1_syntax_format_validation # 100%必须通过
          - layer_2_content_completeness_validation # ≥90%标准
          - layer_3_content_quality_validation # ≥87%标准
          - layer_4_consistency_validation # ≥96%标准
          - layer_5_implementation_feasibility_validation # ≥83%标准
          - layer_6_business_value_validation # ≥82%标准
          - layer_7_final_integration_validation # ≥90%标准
        success_criteria:
          - overall_quality_score: ">95"
          - critical_layer_pass_rate: "100%"
          - consistency_score: ">96"
          - feasibility_score: ">85"
        timeout: 2100
        notes: "企业级7层质量验证系统"

      # 2.2 智能问题修复（如果需要）
      - step: intelligent_issue_resolution
        agent: various
        action: fix_identified_issues
        condition: po_validation_issues_exist
        requires: po_comprehensive_validation
        execution_mode: sequential_fix_cycle
        fix_sequence:
          - syntax_and_format_fixes
          - content_completeness_fixes
          - quality_improvement_fixes
          - consistency_alignment_fixes
        quality_gates:
          - fix_completeness_validation
          - fix_quality_validation
          - regression_prevention_check
        success_criteria:
          - all_issues_resolved: "100%"
          - no_regression_introduced: true
        timeout: 1800
        notes: "智能化问题修复 - 串行解决所有质量问题"

    # 阶段2质量门控
    phase_quality_gates:
      - gate: seven_layer_validation_complete
        criteria: "7层质量验证100%通过"
      - gate: zero_critical_issues
        criteria: "零关键质量问题"
      - gate: validation_consistency
        criteria: "验证结果一致性确认"

  # ===== 超级阶段3：智能用户故事生成与开发 =====
  mega_phase_3_story_development:
    name: "智能用户故事生成与开发"
    duration: "60-120分钟"
    execution_mode: "strict_sequential_per_story"
    description: "全自动化用户故事生成、开发和验证"

    steps:
      # 3.1 文档分片和准备
      - step: document_sharding
        agent: po
        action: shard_documents_for_development
        creates: sharded_docs
        requires: all_validated_artifacts
        wait_for_previous: true
        quality_gates:
          - sharding_completeness_check
          - dependency_preservation_check
        success_criteria:
          - sharding_coverage: "100%"
          - dependency_integrity: "100%"
        timeout: 900
        notes: "智能文档分片 - 为开发准备结构化输入"

      # 3.2 增强用户故事创建
      - step: enhanced_story_creation
        agent: sm
        action: create_enhanced_stories_with_database
        creates: enhanced_stories/
        requires:
          - sharded_docs
          - database-design.md
          - generated-code/
          - fullstack-architecture.md
        execution_mode: sequential_per_epic
        completion_requirement: 100%
        template: enhanced-story-with-database-tmpl.yaml
        quality_gates:
          - template_compliance_100_percent
          - content_structure_validation
          - database_integration_validation
          - story_completeness_validation
          - acceptance_criteria_validation
        success_criteria:
          - story_quality_score: ">98"
          - template_compliance: "100%"
          - zero_validation_errors: true
          - acceptance_criteria_completeness: "100%"
        wait_for_previous_completion: true
        auto_correction:
          max_attempts: 5
          strategies:
            - immediate_auto_correction
            - template_based_correction
            - ai_guided_improvement
        timeout: 3600
        retry: 3
        notes: "企业级增强用户故事创建 - 每个史诗依次完成"

      # 3.3 串行开发实现
      - step: sequential_development
        agent: dev
        action: implement_stories_sequentially
        creates: implementation_files/
        requires:
          - enhanced_stories/
          - generated-code/
          - fullstack-architecture.md
        execution_mode: sequential_per_story
        completion_requirement: 100%
        quality_gates:
          - implementation_quality_check
          - code_structure_validation
          - api_integration_validation
          - implementation_completeness_check
          - unit_test_coverage_check
        success_criteria:
          - implementation_quality_score: ">95"
          - code_coverage: ">90%"
          - zero_critical_bugs: true
          - api_contract_compliance: "100%"
        wait_for_previous_completion: true
        auto_correction:
          max_attempts: 5
          correction_strategies:
            - immediate_auto_correction
            - iterative_quality_improvement
            - architectural_guidance_correction
        timeout: 5400
        notes: "企业级串行开发实现 - 每个故事依次完成"

      # 3.4 质量保证验证
      - step: comprehensive_qa
        agent: qa
        action: execute_comprehensive_qa_validation
        validates: implementation_files/
        requires: implementation_files/
        wait_for_previous: true
        quality_gates:
          - unit_test_validation
          - integration_test_validation
          - code_quality_assessment
          - security_validation
          - performance_validation
        success_criteria:
          - test_pass_rate: ">98%"
          - code_quality_score: ">90"
          - security_score: ">95"
          - performance_score: ">85"
        timeout: 2700
        notes: "全面质量保证验证"

    # 阶段3质量门控
    phase_quality_gates:
      - gate: story_development_completeness
        criteria: "所有用户故事100%开发完成"
      - gate: implementation_quality_standards
        criteria: "实现质量达到企业标准"
      - gate: qa_validation_complete
        criteria: "QA验证100%通过"

  # ===== 超级阶段4：全局质量审计与闭环修复 =====
  mega_phase_4_global_qa_loop:
    name: "全局质量审计与闭环修复"
    duration: "45-90分钟"
    execution_mode: "closed_loop_with_max_5_iterations"
    description: "企业级全局质量审计和智能闭环修复系统"

    steps:
      # 4.1 全局需求审计
      - step: global_requirements_audit
        agent: global-requirements-auditor
        action: comprehensive_global_audit
        creates: global-audit-report.md
        requires:
          - all_stories_completed
          - all_implementations
          - all_test_results
        validation_dimensions:
          - prd_to_story_completeness # 100%覆盖要求
          - story_quality_assessment # ≥95%标准
          - implementation_completeness # 100%实现
          - test_coverage_validation # ≥90%覆盖
          - integration_verification # ≥95%集成
          - performance_benchmarks # ≥90%基准
          - security_compliance # ≥98%合规
          - business_value_realization # ≥85%价值
        quality_thresholds:
          critical_requirements_coverage: 100
          high_priority_completeness: 98
          overall_quality_score: 95
          test_coverage: 90
          security_score: 98
        outputs:
          - requirements_coverage_matrix
          - quality_assessment_report
          - identified_issues_list
          - improvement_recommendations
        timeout: 2400
        notes: "企业级全局深度审计 - 全面质量保证验证"

      # 4.2 智能问题分发
      - step: intelligent_issue_dispatch
        agent: issue-dispatcher
        action: analyze_and_route_global_issues
        requires: global-audit-report.md
        condition: issues_identified
        routing_rules:
          requirement_gaps:
            target: sm
            action: create_missing_stories
            priority: CRITICAL
          story_quality_issues:
            target: sm
            action: refine_stories
            priority: HIGH
          implementation_defects:
            target: dev
            action: fix_defects
            priority: CRITICAL
          test_coverage_gaps:
            target: qa
            action: enhance_tests
            priority: HIGH
          integration_issues:
            target: architect
            action: resolve_integration
            priority: CRITICAL
          performance_issues:
            target: dev
            action: optimize_performance
            priority: HIGH
          security_vulnerabilities:
            target: dev
            action: fix_security_issues
            priority: CRITICAL
        tracking:
          - issue_id
          - assigned_agent
          - fix_deadline
          - current_status
          - impact_assessment
        timeout: 900
        notes: "企业级智能问题分发与任务指派"

      # 4.3 串行问题修复循环
      - step: serial_fix_execution_cycle
        description: "串行执行所有修复任务"
        execution_mode: strict_sequential
        substeps:
          # 4.3.1 用户故事问题修复
          - substep: story_fixes
            agent: sm
            action: fix_story_issues_comprehensively
            condition: story_issues_exist
            auto_retry: 5
            validation: enhanced_story_quality_validator
            quality_gates:
              - story_fixes_complete
              - story_quality_validated
              - zero_story_defects
              - requirement_coverage_maintained
            success_criteria:
              - all_story_issues_resolved: 100%
              - story_quality_score: ">98"
              - template_compliance: "100%"
            timeout: 3000
            notes: "串行修复用户故事问题 - 必须100%完成才能继续"

          # 4.3.2 实现问题修复
          - substep: implementation_fixes
            agent: dev
            action: fix_implementation_issues_comprehensively
            condition: code_issues_exist
            requires: story_fixes_completed
            auto_retry: 5
            validation: enhanced_code_quality_validator
            quality_gates:
              - implementation_fixes_complete
              - code_quality_validated
              - zero_implementation_defects
              - performance_standards_met
            success_criteria:
              - all_code_issues_resolved: 100%
              - code_quality_score: ">95"
              - performance_score: ">90"
            timeout: 4200
            notes: "串行修复实现问题 - 依赖故事修复完成"

          # 4.3.3 测试和集成修复
          - substep: test_and_integration_fixes
            agent: qa
            action: fix_test_and_integration_issues
            condition: test_or_integration_issues_exist
            requires: implementation_fixes_completed
            auto_retry: 3
            validation: comprehensive_test_validator
            quality_gates:
              - test_coverage_fixes_complete
              - integration_issues_resolved
              - zero_test_gaps
              - end_to_end_validation
            success_criteria:
              - all_test_issues_resolved: 100%
              - test_coverage: ">95%"
              - integration_score: ">98"
            timeout: 2700
            notes: "串行修复测试和集成问题 - 依赖代码修复完成"

      # 4.4 修复验证与决策
      - step: fix_validation_and_decision
        agent: automated-fix-validator
        action: validate_all_fixes_comprehensively
        requires: all_fixes_completed
        validation_layers:
          - static_code_analysis
          - unit_test_execution
          - integration_testing
          - e2e_testing
          - business_logic_validation
          - performance_validation
          - security_scanning
          - regression_testing
        regression_testing:
          scope: comprehensive_system_wide
          depth: full_regression_suite
        decision_outcomes:
          - approve_fixes_and_continue
          - reject_and_rework_fixes
          - conditional_approval_with_monitoring
          - escalate_for_expert_review
        success_criteria:
          - all_validation_layers_pass: true
          - zero_regression_detected: true
          - performance_maintained: true
          - security_maintained: true
        timeout: 2100
        notes: "全面修复验证和智能决策"

      # 4.5 质量保证循环控制
      - step: qa_loop_control
        loop_configuration:
          max_iterations: 5
          exit_conditions:
            - no_critical_issues: true
            - no_high_priority_issues: true
            - quality_score: ">95"
            - all_requirements_covered: true
            - security_score: ">98"
            - performance_score: ">90"

          loop_steps:
            - re_audit_after_fixes
            - route_new_issues_if_found
            - execute_fixes_if_needed
            - validate_new_fixes
            - assess_loop_exit_criteria

          fallback_strategy:
            condition: max_iterations_reached
            action: escalate_to_expert_review
            includes:
              - comprehensive_issue_analysis
              - expert_recommendation_generation
              - risk_assessment_report

        notes: "智能质量保证循环 - 自动循环直至企业级质量达标"

    # 阶段4质量门控
    phase_quality_gates:
      - gate: global_audit_complete
        criteria: "全局审计100%完成"
      - gate: all_issues_resolved
        criteria: "所有识别问题100%解决"
      - gate: quality_loop_exit_criteria_met
        criteria: "质量循环退出条件满足"
      - gate: enterprise_quality_standards_achieved
        criteria: "企业级质量标准达成"

  # ===== 超级阶段5：项目集成与最终交付 =====
  mega_phase_5_integration_delivery:
    name: "项目集成与最终交付"
    duration: "30-45分钟"
    execution_mode: "strict_sequential"
    description: "企业级项目集成、验证和交付准备"

    steps:
      # 5.1 跨模块系统集成
      - step: comprehensive_system_integration
        agent: master-execution-engine
        action: execute_comprehensive_integration
        requires: quality_loop_completed
        scope: "全系统集成测试"
        integration_levels:
          - component_integration
          - service_integration
          - system_integration
          - cross_platform_integration
        validation:
          - api_integration_testing
          - database_consistency_validation
          - cross_service_communication_testing
          - data_flow_validation
          - business_process_integration
        success_criteria:
          - integration_test_pass_rate: ">99%"
          - cross_service_reliability: ">98%"
          - data_consistency_score: "100%"
        timeout: 1800
        notes: "企业级全系统集成验证"

      # 5.2 端到端业务流程验证
      - step: end_to_end_business_validation
        agent: master-execution-engine
        action: validate_complete_business_processes
        requires: comprehensive_system_integration
        scope: "端到端业务流程验证"
        validation:
          - complete_user_journeys
          - business_workflow_execution
          - data_lifecycle_validation
          - compliance_process_validation
          - error_handling_validation
        success_criteria:
          - business_process_success_rate: ">99%"
          - user_journey_completion_rate: "100%"
          - compliance_validation_score: "100%"
        timeout: 1500
        notes: "全面端到端业务流程验证"

      # 5.3 性能和安全验证
      - step: performance_security_validation
        agent: master-execution-engine
        action: execute_performance_security_testing
        requires: end_to_end_business_validation
        scope: "性能和安全综合验证"
        validation:
          - load_testing
          - stress_testing
          - scalability_validation
          - vulnerability_scanning
          - penetration_testing
          - compliance_validation
          - data_protection_validation
        success_criteria:
          - performance_benchmark_compliance: "100%"
          - zero_high_severity_vulnerabilities: true
          - scalability_requirements_met: true
          - compliance_score: "100%"
        timeout: 2100
        notes: "企业级性能和安全验证"

      # 5.4 最终产品验收
      - step: final_product_acceptance
        agent: po
        action: final_comprehensive_acceptance
        requires:
          - all_integrations_validated
          - all_validations_passed
          - quality_standards_achieved
        creates: final-acceptance-report.md
        sign_off_criteria:
          - all_requirements_implemented: true
          - zero_critical_defects: true
          - performance_benchmarks_met: true
          - security_clearance_obtained: true
          - compliance_requirements_satisfied: true
          - business_value_delivered: true
        validation:
          - final_quality_assessment
          - business_value_realization
          - user_acceptance_simulation
          - deployment_readiness_check
        success_criteria:
          - final_acceptance_score: ">98"
          - business_satisfaction: ">95"
          - deployment_readiness: "100%"
        timeout: 1200
        notes: "最终产品验收和签署"

      # 5.5 交付包准备
      - step: delivery_package_preparation
        agent: devops
        action: prepare_comprehensive_delivery_package
        requires: final-acceptance-report.md
        creates: ultimate-delivery-package/
        includes:
          - validated_source_code
          - compiled_applications
          - database_migrations_and_scripts
          - deployment_configurations
          - monitoring_and_alerting_setup
          - security_configurations
          - backup_and_recovery_procedures
          - rollback_procedures
          - operational_runbooks
          - troubleshooting_guides
        validation:
          - package_completeness_check
          - deployment_script_validation
          - configuration_accuracy_check
          - documentation_completeness
        success_criteria:
          - package_completeness: "100%"
          - deployment_script_validation: "100%"
          - documentation_quality: ">95"
        timeout: 1500
        notes: "企业级交付包准备"

      # 5.6 最终交付文档生成
      - step: final_delivery_documentation
        agent: master-execution-engine
        action: generate_comprehensive_delivery_documentation
        requires: ultimate-delivery-package/
        creates:
          - executive_summary_report.md
          - technical_delivery_report.md
          - quality_certification_report.md
          - deployment_guide.md
          - user_documentation/
          - maintenance_guide.md
          - support_contact_information.md
        validation:
          - documentation_completeness
          - documentation_accuracy
          - documentation_usability
        success_criteria:
          - documentation_completeness: "100%"
          - documentation_quality: ">95"
          - user_friendliness_score: ">90"
        timeout: 1200
        notes: "最终交付文档生成"

    # 阶段5质量门控
    phase_quality_gates:
      - gate: system_integration_complete
        criteria: "系统集成100%完成"
      - gate: business_validation_passed
        criteria: "业务验证100%通过"
      - gate: final_acceptance_obtained
        criteria: "最终验收确认获得"
      - gate: delivery_package_ready
        criteria: "交付包完全就绪"

# ========== 工作流状态机（增强版）==========
state_machine:
  states:
    - INITIALIZED: "工作流初始化"
    - INTELLIGENT_ANALYSIS: "智能需求分析中"
    - DESIGN_VALIDATION: "设计验证中"
    - QUALITY_VALIDATION: "质量验证中"
    - STORY_DEVELOPMENT: "故事开发中"
    - GLOBAL_AUDIT: "全局审计中"
    - ISSUE_IDENTIFIED: "发现问题"
    - SERIAL_FIX_IN_PROGRESS: "串行修复进行中"
    - FIX_VALIDATION: "修复验证中"
    - QUALITY_LOOP: "质量循环中"
    - SYSTEM_INTEGRATION: "系统集成中"
    - BUSINESS_VALIDATION: "业务验证中"
    - FINAL_ACCEPTANCE: "最终验收中"
    - DELIVERY_PREPARATION: "交付准备中"
    - COMPLETED: "已完成"
    - FAILED: "失败"
    - ESCALATED: "已升级"

  transitions:
    - from: INITIALIZED
      to: INTELLIGENT_ANALYSIS
      trigger: workflow_start
      validation: system_readiness_check

    - from: INTELLIGENT_ANALYSIS
      to: DESIGN_VALIDATION
      trigger: analysis_complete
      validation: analysis_quality_confirmed

    - from: DESIGN_VALIDATION
      to: QUALITY_VALIDATION
      trigger: design_approved
      validation: design_completeness_verified

    - from: QUALITY_VALIDATION
      to: STORY_DEVELOPMENT
      trigger: quality_validation_passed
      validation: seven_layer_validation_complete

    - from: STORY_DEVELOPMENT
      to: GLOBAL_AUDIT
      trigger: development_complete
      validation: all_stories_implemented

    - from: GLOBAL_AUDIT
      to: [ISSUE_IDENTIFIED, SYSTEM_INTEGRATION]
      trigger: audit_complete
      condition: "issues_found ? ISSUE_IDENTIFIED : SYSTEM_INTEGRATION"

    - from: ISSUE_IDENTIFIED
      to: SERIAL_FIX_IN_PROGRESS
      trigger: issues_routed
      validation: fix_plan_approved

    - from: SERIAL_FIX_IN_PROGRESS
      to: FIX_VALIDATION
      trigger: fixes_complete
      validation: all_fixes_implemented

    - from: FIX_VALIDATION
      to: [QUALITY_LOOP, FAILED]
      trigger: validation_complete
      condition: "validation_passed ? QUALITY_LOOP : FAILED"

    - from: QUALITY_LOOP
      to: [GLOBAL_AUDIT, ESCALATED]
      trigger: loop_iteration
      condition: "max_iterations_reached ? ESCALATED : GLOBAL_AUDIT"

    - from: SYSTEM_INTEGRATION
      to: BUSINESS_VALIDATION
      trigger: integration_complete
      validation: integration_tests_passed

    - from: BUSINESS_VALIDATION
      to: FINAL_ACCEPTANCE
      trigger: business_validation_complete
      validation: business_processes_validated

    - from: FINAL_ACCEPTANCE
      to: DELIVERY_PREPARATION
      trigger: acceptance_obtained
      validation: final_sign_off_complete

    - from: DELIVERY_PREPARATION
      to: COMPLETED
      trigger: delivery_ready
      validation: delivery_package_validated

    - from: [FAILED, ESCALATED]
      to: COMPLETED
      trigger: manual_intervention
      validation: expert_resolution_confirmed

# ========== 质量保证配置（企业级）==========
quality_assurance:
  # 企业级质量门控
  quality_gates:
    critical_gates:
      - system_health_check
      - requirement_coverage_100
      - zero_critical_defects
      - security_clearance_enterprise
      - performance_benchmarks_enterprise
      - compliance_validation_complete
      - business_value_realization

    mandatory_gates:
      - template_compliance_100
      - code_quality_enterprise_standards
      - test_coverage_enterprise_minimum
      - documentation_completeness_enterprise
      - integration_validation_comprehensive
      - security_validation_comprehensive

    recommended_gates:
      - user_experience_excellence
      - maintainability_index_high
      - technical_debt_ratio_minimal
      - scalability_future_proof

  # 质量标准（企业级）
  quality_standards:
    overall_quality_score: 98 # 企业级标准
    requirement_coverage: 100 # 100%覆盖
    story_completeness: 98 # 98%完整性
    code_quality_score: 95 # 95代码质量
    test_coverage: 95 # 95%测试覆盖
    documentation_quality: 95 # 95文档质量
    performance_baseline: 98 # 98%性能基准
    security_score: 99 # 99安全分数
    integration_score: 98 # 98%集成分数
    business_value_score: 90 # 90%业务价值

  # 自动修复策略（增强版）
  auto_correction:
    enabled: true
    execution_mode: intelligent_sequential
    max_attempts: 7 # 增加到7次
    strategies:
      - immediate_auto_correction
      - guided_correction_with_ai
      - template_based_correction
      - incremental_improvement
      - collaborative_refinement
      - expert_system_correction
      - machine_learning_optimization

    sequential_validation:
      - validate_previous_completion
      - ensure_quality_gates_passed
      - verify_dependencies_satisfied
      - confirm_business_value_maintained

    rollback_on_failure: true
    escalation_after_max_attempts: true
    wait_for_completion: true
    learning_from_corrections: true

# ========== 监控和报告（企业级）==========
monitoring_and_reporting:
  real_time_monitoring:
    enabled: true
    update_frequency: REAL_TIME
    execution_mode: comprehensive
    metrics:
      - workflow_progress_detailed
      - quality_scores_multi_dimensional
      - issue_detection_rate
      - fix_success_rate
      - loop_iteration_count
      - agent_performance_analytics
      - resource_utilization_optimization
      - sla_compliance_tracking
      - sequential_completion_rate
      - dependency_satisfaction_rate
      - inter_task_quality_gates
      - business_value_realization
      - customer_satisfaction_prediction

    alerting:
      - quality_degradation_early_warning
      - sla_breach_risk_prediction
      - loop_stuck_detection_ai
      - resource_exhaustion_prediction
      - critical_failure_immediate
      - sequential_execution_blocked
      - dependency_validation_failed
      - quality_gate_failure_analysis
      - business_impact_assessment

  reporting:
    types:
      - executive_dashboard_real_time
      - technical_detail_report_comprehensive
      - quality_audit_report_enterprise
      - issue_tracking_report_detailed
      - performance_analysis_advanced
      - improvement_recommendations_ai
      - business_value_report
      - compliance_certification_report

    frequency:
      real_time: [dashboard, alerts, critical_metrics]
      every_15_minutes: [progress_update, quality_trends]
      hourly: [comprehensive_status, performance_metrics]
      daily: [quality_summary, issue_summary, business_metrics]
      weekly: [trend_analysis, recommendations, optimization]
      on_completion: [final_report, lessons_learned, certification]

  audit_trail:
    enabled: true
    retention: 365_days # 企业级保留期
    tracks:
      - all_decisions_with_context
      - quality_gate_results_detailed
      - issue_routing_intelligence
      - fix_attempts_comprehensive
      - validation_results_complete
      - state_transitions_with_reasoning
      - business_impact_tracking
      - compliance_evidence

# ========== 串行处理配置（终极版）==========
serial_processing:
  enabled: true
  sequential_execution: strict_enterprise
  optimization_strategies:
    - dependency_aware_scheduling
    - quality_gate_enforcement_strict
    - completion_validation_comprehensive
    - progressive_improvement_ai
    - predictive_bottleneck_resolution
    - intelligent_resource_allocation

  sequential_configuration:
    story_creation:
      execution_mode: sequential_with_validation
      completion_requirement: 100%
      quality_validation: mandatory_enterprise
      wait_for_previous: true
      dependency_validation: comprehensive

    fix_execution:
      execution_mode: sequential_intelligent
      completion_requirement: 100%
      quality_validation: mandatory_enterprise
      dependency_enforcement: strict_enterprise
      regression_prevention: comprehensive

    validation_execution:
      execution_mode: sequential_thorough
      completion_requirement: 100%
      comprehensive_validation: true
      progressive_validation: false
      enterprise_standards: true

# ========== 错误处理和恢复（企业级）==========
error_handling:
  detection_mechanisms:
    - runtime_exception_monitoring_ai
    - validation_failure_prediction
    - timeout_detection_intelligent
    - resource_limit_prediction
    - quality_threshold_breach_early_warning
    - business_impact_assessment
    - compliance_deviation_detection

  recovery_strategies:
    immediate_recovery:
      - automatic_retry_intelligent
      - alternative_path_ai
      - graceful_degradation_smart

    checkpoint_recovery:
      - rollback_to_checkpoint_selective
      - partial_state_recovery_optimized
      - incremental_rebuild_intelligent

    escalation_recovery:
      - supervisor_agent_intervention
      - expert_system_consultation
      - human_expert_escalation
      - emergency_bypass_controlled

  retry_policy:
    max_retries: 7
    backoff_strategy: intelligent_exponential
    retry_delay_base: 30 # seconds
    max_retry_delay: 900 # 15 minutes
    learning_from_failures: true

  failure_analysis:
    enabled: true
    ai_powered: true
    includes:
      - root_cause_analysis_deep
      - impact_assessment_comprehensive
      - prevention_recommendations_intelligent
      - process_improvement_suggestions_ai
      - business_continuity_planning

# ========== 成功标准（企业级）==========
success_criteria:
  mandatory_criteria:
    - all_requirements_implemented: true
    - zero_critical_defects: true
    - quality_score_achieved: ">98"
    - test_coverage_met: ">95"
    - security_clearance: passed_enterprise
    - performance_benchmarks: met_enterprise
    - documentation_complete: true
    - sequential_completion_verified: true
    - inter_task_dependencies_validated: true
    - business_value_delivered: true
    - compliance_requirements_satisfied: true

  quality_loop_exit:
    - no_critical_issues: true
    - no_high_priority_issues: true
    - medium_issues: "<3"
    - quality_improvement_trend: positive_strong
    - loop_iterations: "<5"
    - business_impact: positive

  business_criteria:
    - user_acceptance: achieved_enterprise
    - business_value_delivered: true
    - roi_projected: positive_strong
    - risk_assessment: acceptable_enterprise
    - stakeholder_satisfaction: high
    - market_readiness: confirmed

  technical_criteria:
    - scalability_validated: true
    - maintainability_score: ">90"
    - technical_debt_ratio: "<5%"
    - architecture_compliance: 100
    - performance_optimization: achieved
    - security_hardening: complete

# ========== 决策指导（企业级）==========
decision_guidance:
  when_to_use:
    - mission_critical_applications
    - enterprise_grade_requirements
    - zero_defect_tolerance
    - regulatory_compliance_required
    - high_security_requirements
    - scalability_critical_systems
    - continuous_improvement_focus
    - end_to_end_automation_needed

  benefits:
    - guaranteed_enterprise_quality_delivery
    - automated_issue_resolution_intelligent
    - continuous_validation_comprehensive
    - reduced_production_defects_significantly
    - improved_team_efficiency_measurable
    - comprehensive_audit_trail
    - business_value_maximization
    - compliance_assurance_automated

  considerations:
    - longer_initial_cycle_time_justified
    - higher_computational_resources_optimized
    - requires_mature_agent_ecosystem
    - investment_in_automation_setup_roi_positive
    - enterprise_infrastructure_recommended

# ========== 使用示例和最佳实践 ==========
usage_examples:
  ultimate_basic_usage:
    command: "*start-full-requirement-automation"
    description: "启动终极全自动化需求交付"

  enterprise_configuration:
    command: "*start-full-requirement-automation --mode=ENTERPRISE --quality=MAXIMUM --monitoring=COMPREHENSIVE"
    description: "企业级配置启动"

  custom_requirements:
    command: "*start-full-requirement-automation --prd=custom_enterprise_requirements.md --compliance=SOX,GDPR,HIPAA"
    description: "自定义需求和合规启动"

  monitoring_and_control:
    progress_check: "*monitor-ultimate-workflow-progress"
    quality_validation: "*validate-enterprise-quality-gates"
    issue_resolution: "*handle-enterprise-issues"

# ========== 集成和扩展能力 ==========
integrations:
  enhanced_workflows:
    - enhanced-fullstack-with-qa-loop: "完全集成"
    - automated-story-development: "深度集成"
    - requirements-coverage-audit: "内置集成"

  external_enterprise_tools:
    - enterprise_databases: "全面支持"
    - ci_cd_pipelines: "深度集成"
    - monitoring_systems: "实时集成"
    - compliance_tools: "自动集成"
    - security_scanners: "持续集成"
    - performance_analyzers: "实时集成"

  customization_points:
    - quality_standards_enterprise: "可定制企业标准"
    - compliance_requirements: "可配置合规要求"
    - business_process_validation: "可定制业务流程"
    - integration_test_scenarios: "可扩展测试场景"

# ========== 执行示例命令 ==========
execution_examples:
  start_ultimate_workflow: |
    *start-full-requirement-automation \
      --mode="ENTERPRISE_MAXIMUM_QUALITY" \
      --enable-sequential \
      --monitor-comprehensive \
      --quality-enterprise \
      --compliance-strict

  monitor_ultimate_progress: |
    *monitor-ultimate-workflow \
      --show-all-metrics \
      --show-quality-gates \
      --show-business-value \
      --show-compliance-status

  enterprise_intervention: |
    *ultimate-workflow-intervene \
      --workflow-id {id} \
      --action "enterprise_approval" \
      --justification "business_critical_deployment"

# ========== 预期成果（企业级）==========
expected_outcomes:
  quality_improvements:
    - "零格式错误和结构缺陷"
    - "98%以上的整体质量分数"
    - "100%的模板合规性"
    - "98%以上的跨文档一致性"
    - "99%的安全合规性"

  efficiency_gains:
    - "99.9%的自动化处理率"
    - "减少95%的人工返工需求"
    - "提高80%的文档处理速度"
    - "实现全程智能监控"
    - "零人工干预交付"

  business_value:
    - "企业就绪的交付成果"
    - "完整的合规认证文档"
    - "详细的实施和维护指导"
    - "持续改进和优化建议"
    - "业务价值最大化确认"
