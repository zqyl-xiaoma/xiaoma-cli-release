# Full Requirement Automation Workflow - 全需求自动化工作流

workflow:
  name: full-requirement-automation
  id: full-requirement-automation
  title: 全需求自动化开发工作流 🌟
  description: 完整需求从分析到交付的端到端自动化工作流
  version: "2.0.0"

  # 工作流分类和标签
  category: project-automation
  tags:
    - full-automation
    - batch-processing
    - project-delivery
    - parallel-development

  # 工作流适用场景
  use_cases:
    - 完整PRD的端到端自动化开发
    - 大型项目的批量故事管理
    - 多团队并行开发协调
    - 项目级质量控制和交付

# 工作流参与的智能体
agents:
  primary_orchestrator:
    agent: full-requirement-orchestrator
    role: 全需求生命周期总指挥
    responsibilities:
      - 项目级编排和协调
      - 批量故事管理
      - 并行开发调度
      - 项目交付控制

  story_orchestrator:
    agent: automation-orchestrator
    role: 单故事开发执行器
    responsibilities:
      - 执行SM→PO→Dev→QA循环
      - 故事级质量门控
      - 个体故事状态管理

  role_agents:
    - agent: sm
      role: 需求分析和故事创建
    - agent: po
      role: 故事验证和业务确认
    - agent: dev
      role: 开发实现和自测
    - agent: qa
      role: 质量验证和验收测试
    - agent: database-architect
      role: 数据库设计和优化

# 工作流阶段定义
phases:
  phase_1_analysis:
    name: 需求分析与规划
    duration: "5-15分钟"
    description: 深度分析PRD，生成完整故事清单和依赖关系

    steps:
      - step: prd_analysis
        agent: full-requirement-orchestrator
        action: analyze_requirement_document
        inputs: ["prd.md", "existing_database_design.md"]
        outputs: ["requirement_analysis.md"]

      - step: story_generation
        agent: full-requirement-orchestrator
        action: generate_all_stories
        inputs: ["requirement_analysis.md", "database_design.md"]
        outputs:
          - "project_story_backlog.md"
          - "stories/"
          - "story_dependency_graph.yaml"

      - step: development_planning
        agent: full-requirement-orchestrator
        action: create_development_plan
        inputs: ["story_dependency_graph.yaml"]
        outputs:
          - "parallel_development_plan.yaml"
          - "development_roadmap.md"

    quality_gates:
      - gate: story_completeness_check
        criteria: "所有识别的功能点都有对应故事"
      - gate: dependency_consistency_check
        criteria: "依赖关系逻辑一致且无环"
      - gate: priority_logic_validation
        criteria: "优先级分配符合业务价值"

  phase_2_parallel_development:
    name: 并行开发执行
    duration: "主要时间消耗阶段(数小时到数天)"
    description: 启动多条并行开发流水线，同时执行所有用户故事开发

    parallel_pipelines:
      pipeline_foundation:
        focus: "基础设施和核心依赖"
        agent_coordination: automation-orchestrator
        story_selection: "priority=P0 AND category=foundation"

        execution_flow:
          - step: foundation_story_development
            parallel_execution: true
            story_cycle: "SM→PO→Dev→QA"
            quality_gates: ["story_format", "implementation", "testing"]

          - step: foundation_integration
            action: integrate_foundation_components
            validation: ["api_contracts", "database_schema", "authentication"]

      pipeline_core_business:
        focus: "核心业务功能"
        agent_coordination: automation-orchestrator
        story_selection: "priority=P1 AND category=business"
        dependencies: ["pipeline_foundation"]

        execution_flow:
          - step: core_business_development
            parallel_execution: true
            story_cycle: "SM→PO→Dev→QA"
            cross_story_coordination: true

          - step: business_process_integration
            action: validate_business_workflows
            validation: ["end_to_end_flows", "business_rules", "data_consistency"]

      pipeline_features:
        focus: "特性功能开发"
        agent_coordination: automation-orchestrator
        story_selection: "priority=P2 AND category=features"
        dependencies: ["pipeline_core_business"]

        execution_flow:
          - step: feature_development
            parallel_execution: true
            story_cycle: "SM→PO→Dev→QA"

          - step: feature_integration
            action: integrate_feature_modules
            validation: ["ui_consistency", "api_compatibility", "performance"]

      pipeline_support:
        focus: "支撑功能开发"
        agent_coordination: automation-orchestrator
        story_selection: "priority=P3 AND category=support"
        dependencies: ["pipeline_features"]

        execution_flow:
          - step: support_feature_development
            parallel_execution: true
            story_cycle: "SM→PO→Dev→QA"

    synchronization_points:
      sync_foundation_complete:
        trigger: "pipeline_foundation完成"
        validation: "基础API和认证系统就绪"
        next_action: "启动pipeline_core_business"

      sync_core_complete:
        trigger: "pipeline_core_business完成"
        validation: "核心业务流程就绪"
        next_action: "启动pipeline_features"

      sync_features_complete:
        trigger: "pipeline_features完成"
        validation: "所有功能模块就绪"
        next_action: "启动pipeline_support"

    monitoring_and_coordination:
      - real_time_progress_tracking: 实时进度跟踪
      - dependency_satisfaction_monitoring: 依赖满足监控
      - quality_metrics_collection: 质量指标收集
      - bottleneck_detection_and_resolution: 瓶颈检测和解决
      - cross_pipeline_conflict_resolution: 跨流水线冲突解决

  phase_3_project_integration:
    name: 项目集成与验证
    duration: "15-30分钟"
    description: 执行项目级集成测试，确保系统完整性

    steps:
      - step: cross_module_integration
        agent: full-requirement-orchestrator
        action: execute_integration_testing
        scope: "跨模块集成测试"
        validation:
          - api_integration_testing: API集成测试
          - database_consistency_check: 数据库一致性检查
          - cross_service_communication: 跨服务通信验证

      - step: end_to_end_validation
        agent: full-requirement-orchestrator
        action: validate_business_processes
        scope: "端到端业务流程验证"
        validation:
          - complete_user_journeys: 完整用户旅程
          - business_workflow_execution: 业务工作流执行
          - data_lifecycle_validation: 数据生命周期验证

      - step: performance_validation
        agent: full-requirement-orchestrator
        action: execute_performance_testing
        scope: "性能和扩展性验证"
        validation:
          - load_testing: 负载测试
          - stress_testing: 压力测试
          - scalability_validation: 扩展性验证

      - step: security_validation
        agent: full-requirement-orchestrator
        action: execute_security_testing
        scope: "安全性综合验证"
        validation:
          - vulnerability_scanning: 漏洞扫描
          - penetration_testing: 渗透测试
          - compliance_validation: 合规性验证

    quality_gates:
      - gate: integration_test_pass_rate
        criteria: "集成测试通过率≥98%"
      - gate: performance_benchmark_compliance
        criteria: "性能指标满足基准要求"
      - gate: security_vulnerability_threshold
        criteria: "零高危安全漏洞"
      - gate: business_process_validation
        criteria: "所有业务流程验证通过"

  phase_4_delivery:
    name: 项目交付
    duration: "5-10分钟"
    description: 生成最终交付物和项目文档

    steps:
      - step: deliverable_packaging
        agent: full-requirement-orchestrator
        action: generate_project_deliverables
        outputs:
          - deployment_package: 部署包
          - api_documentation: API文档
          - user_documentation: 用户文档
          - maintenance_guide: 维护指南

      - step: handover_preparation
        agent: full-requirement-orchestrator
        action: prepare_project_handover
        outputs:
          - project_summary_report: 项目总结报告
          - quality_metrics_report: 质量指标报告
          - deployment_instructions: 部署说明
          - support_contact_info: 支持联系信息

      - step: final_validation
        agent: full-requirement-orchestrator
        action: validate_delivery_completeness
        validation:
          - deliverable_completeness: 交付物完整性
          - documentation_quality: 文档质量
          - deployment_readiness: 部署就绪度
          - handover_checklist: 交接检查清单

# 工作流执行配置
execution:
  # 并行执行配置
  parallelization:
    max_parallel_pipelines: 4
    max_stories_per_pipeline: 15
    resource_allocation: "dynamic"
    load_balancing: "priority_based"

  # 错误处理配置
  error_handling:
    retry_strategy: "exponential_backoff"
    max_retries: 3
    failure_escalation: "human_intervention"
    rollback_capability: true

  # 质量控制配置
  quality_control:
    continuous_monitoring: true
    real_time_alerts: true
    quality_gate_enforcement: "strict"
    deviation_threshold: "5%"

  # 监控和报告
  monitoring:
    progress_tracking: "real_time"
    metrics_collection: "comprehensive"
    dashboard_updates: "every_5_minutes"
    notification_channels: ["email", "slack", "webhook"]

# 工作流模板和配置
templates:
  enhanced_story_template: "enhanced-story-with-database-tmpl.yaml"
  integration_test_template: "integration-test-tmpl.yaml"
  deliverable_package_template: "project-deliverable-tmpl.yaml"

# 质量标准和验收标准
quality_standards:
  story_level:
    - acceptance_criteria_completeness: 100%
    - unit_test_coverage: ≥80%
    - code_quality_score: ≥8.5/10
    - api_documentation_completeness: 100%

  pipeline_level:
    - integration_test_pass_rate: ≥95%
    - cross_story_consistency: 100%
    - performance_benchmark_compliance: 100%

  project_level:
    - end_to_end_test_coverage: 100%
    - security_vulnerability_count: 0 (high severity)
    - deployment_readiness_score: ≥9/10
    - documentation_completeness: 100%

# 风险管理和缓解策略
risk_management:
  identified_risks:
    dependency_blocking:
      probability: "medium"
      impact: "high"
      mitigation: "dynamic_dependency_resolution"

    resource_contention:
      probability: "low"
      impact: "medium"
      mitigation: "intelligent_load_balancing"

    integration_conflicts:
      probability: "medium"
      impact: "high"
      mitigation: "continuous_integration_validation"

    quality_degradation:
      probability: "low"
      impact: "high"
      mitigation: "strict_quality_gates"

  monitoring_triggers:
    - progress_deviation_threshold: "10%"
    - quality_metric_decline: "5%"
    - error_rate_spike: "2x baseline"
    - dependency_satisfaction_delay: "15 minutes"

# 成功指标和KPI
success_metrics:
  delivery_metrics:
    - on_time_delivery_rate: ≥95%
    - scope_completion_rate: 100%
    - quality_standard_compliance: ≥98%

  efficiency_metrics:
    - automation_coverage: ≥90%
    - parallel_processing_efficiency: ≥75%
    - resource_utilization_rate: ≥80%

  quality_metrics:
    - defect_escape_rate: ≤2%
    - customer_satisfaction_score: ≥8.5/10
    - maintenance_cost_reduction: ≥30%

# 使用示例和最佳实践
usage_examples:
  basic_usage:
    command: "*agent full-requirement-orchestrator"
    followed_by: "*start-full-requirement-automation"

  advanced_configuration:
    custom_prd: "*start-full-requirement-automation --prd custom_requirements.md"
    parallel_config: "*start-full-requirement-automation --pipelines 6 --max-stories 10"

  monitoring_and_control:
    progress_check: "*monitor-project-progress"
    quality_validation: "*validate-quality-gates"
    issue_resolution: "*handle-cross-story-conflicts"

# 集成点和扩展能力
integrations:
  existing_workflows:
    - enhanced-fullstack-with-database: "story-level integration"
    - automated-story-development: "individual story processing"

  external_tools:
    - mysql_mcp: "database operations"
    - testing_frameworks: "automated testing"
    - deployment_tools: "continuous deployment"
    - monitoring_systems: "real-time monitoring"

  customization_points:
    - story_generation_rules: "自定义故事生成规则"
    - quality_gate_criteria: "自定义质量门控标准"
    - parallel_execution_strategy: "自定义并行执行策略"
    - integration_test_scenarios: "自定义集成测试场景"
