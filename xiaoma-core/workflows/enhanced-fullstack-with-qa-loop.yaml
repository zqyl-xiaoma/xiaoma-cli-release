# <!-- Powered by XIAOMA™ Core -->
# Enhanced Full-Stack Development with Closed-Loop Quality Assurance
# 增强型全栈开发工作流 - 带闭环质量保证系统

workflow:
  id: enhanced-fullstack-with-qa-loop
  name: Enhanced Full-Stack Development with Closed-Loop Quality Assurance
  version: "3.0"
  description: >-
    世界级的全自动化软件开发工作流，包含完整的闭环质量保证系统。
    特色：全局需求审计、智能问题分发、自动化修复验证、持续质量改进。
    核心原则：质量优先、自动化驱动、持续验证、零缺陷交付。
  type: greenfield
  project_types:
    - web-app
    - saas
    - enterprise-app
    - data-driven-app
    - api-first
    - mission-critical-system

  # ========== 工作流主序列 ==========
  sequence:
    # ===== 阶段1：需求分析与设计 =====
    - agent: analyst
      creates: project-brief.md
      optional_steps:
        - brainstorming_session
        - market_research_prompt
      quality_gates:
        - completeness_check
        - feasibility_validation
      notes: "项目分析与概要设计"

    - agent: pm
      creates: prd.md
      requires: project-brief.md
      quality_gates:
        - requirement_completeness
        - measurability_check
        - priority_validation
      notes: "创建详细产品需求文档"

    # ===== 阶段2：数据库与架构设计 =====
    - agent: database-architect
      action: analyze_existing_database
      creates: existing-database-analysis.md
      condition: has_existing_database
      notes: "分析现有数据库结构"

    - agent: database-architect
      creates: database-design.md
      requires:
        - prd.md
        - existing-database-analysis.md (if exists)
      quality_gates:
        - normalization_check
        - performance_optimization
        - scalability_validation
      notes: "设计数据库架构"

    - agent: database-architect
      action: generate_ddl_dml
      creates: database-scripts/
      requires: database-design.md
      validation: syntax_check
      notes: "生成数据库脚本"

    - agent: database-architect
      action: generate_entities_and_mappers
      creates: generated-code/
      requires: database-design.md
      quality_gates:
        - code_generation_validation
        - naming_convention_check
      notes: "生成实体类和映射器"

    - agent: ux-expert
      creates: front-end-spec.md
      requires:
        - prd.md
        - database-design.md
      quality_gates:
        - usability_validation
        - accessibility_check
      notes: "创建前端设计规范"

    - agent: architect
      creates: fullstack-architecture.md
      requires:
        - prd.md
        - database-design.md
        - front-end-spec.md
      quality_gates:
        - architecture_completeness
        - scalability_design
        - security_architecture
      notes: "设计全栈架构"

    # ===== 阶段3：初步验证与调整 =====
    - agent: po
      validates: all_artifacts
      uses: po-master-checklist
      quality_gates:
        - layer_1_syntax_format_validation
        - layer_2_content_completeness_validation
        - layer_3_content_quality_validation
        - layer_4_consistency_validation
        - layer_5_implementation_feasibility_validation
        - layer_6_business_value_validation
      notes: "产品负责人验证所有文档"

    - agent: various
      updates: any_flagged_documents
      condition: po_checklist_issues
      notes: "修复标记的问题"

    # ===== 阶段4：开发实施 =====
    - agent: po
      action: shard_documents
      creates: sharded_docs
      requires: all_artifacts_in_project
      notes: "文档分片准备开发"

    - agent: sm
      action: create_enhanced_story_with_database
      creates: story.md
      requires:
        - sharded_docs
        - database-design.md
        - generated-code/
      repeats: for_each_epic
      template: enhanced-story-with-database-tmpl.yaml
      quality_gates:
        - template_compliance_100_percent
        - content_structure_validation
        - database_integration_validation
      timeout: 1800
      retry: 3
      notes: "创建增强用户故事"

    - agent: dev
      action: implement_story
      creates: implementation_files
      requires:
        - story.md
        - generated-code/
      quality_gates:
        - implementation_quality_check
        - code_structure_validation
        - api_integration_validation
      auto_correction:
        max_attempts: 3
        correction_strategies:
          - immediate_auto_correction
          - iterative_quality_improvement
      notes: "开发实现用户故事"

    - agent: qa
      action: review_implementation
      updates: implementation_files
      requires: implementation_files
      quality_gates:
        - unit_test_validation
        - integration_test_validation
        - code_coverage_check
      notes: "QA初步审查"

    # ===== 阶段5：全局质量审计（新增核心阶段）=====
    - agent: global-requirements-auditor
      action: comprehensive_global_audit
      creates: global-audit-report.md
      requires:
        - all_stories_completed
        - all_implementations
        - all_test_results
      validation_dimensions:
        - prd_to_story_completeness
        - story_quality_assessment
        - implementation_completeness
        - test_coverage_validation
        - integration_verification
        - performance_benchmarks
        - security_compliance
      quality_thresholds:
        critical_requirements_coverage: 100
        high_priority_completeness: 95
        overall_quality_score: 90
        test_coverage: 85
      outputs:
        - requirements_coverage_matrix
        - quality_assessment_report
        - identified_issues_list
        - improvement_recommendations
      notes: |
        全局深度审计 - 核心质量保证阶段
        验证所有PRD需求是否完整实现
        评估每个用户故事的质量
        审计所有开发任务的完成度

    # ===== 阶段6：问题分发与修复循环（新增）=====
    - agent: issue-dispatcher
      action: analyze_and_route_issues
      requires: global-audit-report.md
      condition: issues_identified
      routing_rules:
        requirement_gaps:
          target: sm
          action: create_missing_stories
          priority: HIGH
        story_quality_issues:
          target: sm
          action: refine_stories
          priority: MEDIUM
        implementation_defects:
          target: dev
          action: fix_defects
          priority: HIGH
        test_coverage_gaps:
          target: qa
          action: enhance_tests
          priority: MEDIUM
        documentation_gaps:
          target: doc
          action: update_docs
          priority: LOW
      tracking:
        - issue_id
        - assigned_agent
        - fix_deadline
        - current_status
      notes: "智能问题分发与任务指派"

    # ===== 阶段7：自动化修复执行（新增）=====
    - step: parallel_fix_execution
      description: "并行执行所有修复任务"
      agents:
        - agent: sm
          action: fix_story_issues
          condition: story_issues_exist
          auto_retry: 3
          validation: story_quality_validator

        - agent: dev
          action: fix_implementation_issues
          condition: code_issues_exist
          auto_retry: 3
          validation: code_quality_validator

        - agent: qa
          action: fix_test_coverage
          condition: test_issues_exist
          auto_retry: 2
          validation: coverage_validator

      coordination: issue-dispatcher
      timeout: 7200 # 2小时
      notes: "并行执行所有修复任务"

    # ===== 阶段8：修复验证与回归（新增）=====
    - agent: automated-fix-validator
      action: validate_all_fixes
      requires: all_fixes_completed
      validation_layers:
        - static_code_analysis
        - unit_test_execution
        - integration_testing
        - e2e_testing
        - business_logic_validation
        - performance_validation
        - security_scanning
      regression_testing:
        scope: affected_components_and_dependencies
        depth: comprehensive
      decision_outcomes:
        - approve_fixes
        - reject_and_rework
        - conditional_approval
        - escalate_for_review
      notes: "验证所有修复的有效性"

    # ===== 阶段9：循环验证直至通过（新增）=====
    - loop: quality_assurance_loop
      description: "质量保证循环 - 持续直到无问题"
      max_iterations: 5
      steps:
        - agent: global-requirements-auditor
          action: re_audit_after_fixes
          creates: updated-audit-report.md

        - condition: new_issues_found
          agent: issue-dispatcher
          action: route_new_issues

        - condition: fixes_needed
          parallel_execution: fix_execution_cycle

        - agent: automated-fix-validator
          action: validate_new_fixes

      exit_condition:
        - no_critical_issues
        - no_high_priority_issues
        - quality_score: ">90"
        - all_requirements_covered

      fallback:
        condition: max_iterations_reached
        action: escalate_to_human_review

      notes: "闭环质量保证 - 自动循环直至质量达标"

    # ===== 阶段10：最终验证与发布准备 =====
    - agent: po
      action: final_acceptance
      requires:
        - quality_loop_completed
        - all_validations_passed
      creates: release-readiness-report.md
      sign_off_criteria:
        - all_requirements_implemented
        - zero_critical_defects
        - performance_benchmarks_met
        - security_clearance_obtained
        - documentation_complete
      notes: "最终验收与发布批准"

    - agent: devops
      action: prepare_deployment
      creates: deployment-package/
      requires: release-readiness-report.md
      includes:
        - validated_code
        - database_migrations
        - configuration_files
        - rollback_plan
        - monitoring_setup
      notes: "准备部署包"

  # ========== 工作流状态机（新增）==========
  state_machine:
    states:
      - INITIALIZED: "工作流初始化"
      - REQUIREMENTS_ANALYSIS: "需求分析中"
      - DESIGN_PHASE: "设计阶段"
      - DEVELOPMENT_PHASE: "开发阶段"
      - INITIAL_QA: "初步QA"
      - GLOBAL_AUDIT: "全局审计中"
      - ISSUE_IDENTIFIED: "发现问题"
      - FIX_IN_PROGRESS: "修复进行中"
      - FIX_VALIDATION: "修复验证中"
      - QUALITY_LOOP: "质量循环中"
      - FINAL_VALIDATION: "最终验证"
      - RELEASE_READY: "准备发布"
      - COMPLETED: "已完成"
      - FAILED: "失败"
      - ESCALATED: "已升级"

    transitions:
      - from: INITIALIZED
        to: REQUIREMENTS_ANALYSIS
        trigger: workflow_start

      - from: REQUIREMENTS_ANALYSIS
        to: DESIGN_PHASE
        trigger: requirements_complete

      - from: DESIGN_PHASE
        to: DEVELOPMENT_PHASE
        trigger: design_approved

      - from: DEVELOPMENT_PHASE
        to: INITIAL_QA
        trigger: development_complete

      - from: INITIAL_QA
        to: GLOBAL_AUDIT
        trigger: initial_qa_passed

      - from: GLOBAL_AUDIT
        to: [ISSUE_IDENTIFIED, FINAL_VALIDATION]
        trigger: audit_complete
        condition: "issues_found ? ISSUE_IDENTIFIED : FINAL_VALIDATION"

      - from: ISSUE_IDENTIFIED
        to: FIX_IN_PROGRESS
        trigger: issues_routed

      - from: FIX_IN_PROGRESS
        to: FIX_VALIDATION
        trigger: fixes_complete

      - from: FIX_VALIDATION
        to: [QUALITY_LOOP, FAILED]
        trigger: validation_complete
        condition: "validation_passed ? QUALITY_LOOP : FAILED"

      - from: QUALITY_LOOP
        to: [GLOBAL_AUDIT, ESCALATED]
        trigger: loop_iteration
        condition: "max_iterations ? ESCALATED : GLOBAL_AUDIT"

      - from: FINAL_VALIDATION
        to: [RELEASE_READY, FAILED]
        trigger: final_check
        condition: "approved ? RELEASE_READY : FAILED"

      - from: RELEASE_READY
        to: COMPLETED
        trigger: deployment_ready

      - from: [FAILED, ESCALATED]
        to: COMPLETED
        trigger: manual_intervention

  # ========== 质量保证配置（增强）==========
  quality_assurance:
    # 多层质量门控
    quality_gates:
      critical_gates:
        - system_health_check
        - requirement_coverage_100
        - zero_critical_defects
        - security_clearance
        - performance_benchmarks

      mandatory_gates:
        - template_compliance
        - code_quality_standards
        - test_coverage_minimum
        - documentation_completeness
        - integration_validation

      recommended_gates:
        - user_experience_score
        - maintainability_index
        - technical_debt_ratio

    # 质量标准（提高阈值）
    quality_standards:
      overall_quality_score: 95 # 提高到95
      requirement_coverage: 100 # 100%覆盖
      story_completeness: 95 # 95%完整性
      code_quality_score: 90 # 90代码质量
      test_coverage: 90 # 90%测试覆盖
      documentation_quality: 85 # 85文档质量
      performance_baseline: 95 # 95%性能基准
      security_score: 95 # 95安全分数

    # 自动修复策略
    auto_correction:
      enabled: true
      max_attempts: 5 # 增加到5次
      strategies:
        - immediate_auto_correction
        - guided_correction_with_ai
        - template_based_correction
        - incremental_improvement
        - collaborative_refinement

      rollback_on_failure: true
      escalation_after_max_attempts: true

  # ========== 监控和报告（增强）==========
  monitoring_and_reporting:
    real_time_monitoring:
      enabled: true
      update_frequency: REAL_TIME
      metrics:
        - workflow_progress
        - quality_scores
        - issue_detection_rate
        - fix_success_rate
        - loop_iteration_count
        - agent_performance
        - resource_utilization
        - sla_compliance

      alerting:
        - quality_degradation
        - sla_breach_risk
        - loop_stuck_detection
        - resource_exhaustion
        - critical_failure

    reporting:
      types:
        - executive_dashboard
        - technical_detail_report
        - quality_audit_report
        - issue_tracking_report
        - performance_analysis
        - improvement_recommendations

      frequency:
        real_time: [dashboard, alerts]
        hourly: [progress_update]
        daily: [quality_summary, issue_summary]
        weekly: [trend_analysis, recommendations]
        on_completion: [final_report, lessons_learned]

    audit_trail:
      enabled: true
      retention: 90_days
      tracks:
        - all_decisions
        - quality_gate_results
        - issue_routing
        - fix_attempts
        - validation_results
        - state_transitions

  # ========== 并行处理配置（优化）==========
  parallel_processing:
    enabled: true
    max_concurrent_tasks: 10 # 增加并发数
    optimization_strategies:
      - dependency_aware_scheduling
      - resource_balanced_allocation
      - priority_based_queuing
      - adaptive_parallelism

    batch_configuration:
      story_creation:
        batch_size: 5
        parallel_execution: true

      fix_execution:
        batch_size: 10
        parallel_execution: true
        coordination: centralized

      validation_execution:
        batch_size: 8
        parallel_execution: true
        progressive_validation: true

  # ========== 错误处理和恢复（增强）==========
  error_handling:
    detection_mechanisms:
      - runtime_exception_monitoring
      - validation_failure_detection
      - timeout_detection
      - resource_limit_detection
      - quality_threshold_breach

    recovery_strategies:
      immediate_recovery:
        - automatic_retry
        - alternative_path
        - graceful_degradation

      checkpoint_recovery:
        - rollback_to_checkpoint
        - partial_state_recovery
        - incremental_rebuild

      escalation_recovery:
        - supervisor_agent_intervention
        - human_expert_consultation
        - emergency_bypass

    retry_policy:
      max_retries: 5
      backoff_strategy: exponential
      retry_delay_base: 30 # seconds
      max_retry_delay: 600 # 10 minutes

    failure_analysis:
      enabled: true
      includes:
        - root_cause_analysis
        - impact_assessment
        - prevention_recommendations
        - process_improvement_suggestions

  # ========== 成功标准（严格化）==========
  success_criteria:
    mandatory_criteria:
      - all_requirements_implemented: true
      - zero_critical_defects: true
      - quality_score_achieved: ">95"
      - test_coverage_met: ">90"
      - security_clearance: passed
      - performance_benchmarks: met
      - documentation_complete: true

    quality_loop_exit:
      - no_critical_issues: true
      - no_high_priority_issues: true
      - medium_issues: "<5"
      - quality_improvement_trend: positive
      - loop_iterations: "<5"

    business_criteria:
      - user_acceptance: achieved
      - business_value_delivered: true
      - roi_projected: positive
      - risk_assessment: acceptable

    technical_criteria:
      - scalability_validated: true
      - maintainability_score: ">85"
      - technical_debt_ratio: "<10%"
      - architecture_compliance: 100

  # ========== 决策指导 ==========
  decision_guidance:
    when_to_use:
      - mission_critical_applications
      - high_quality_requirements
      - complex_enterprise_systems
      - regulated_industries
      - zero_defect_tolerance
      - continuous_improvement_focus

    benefits:
      - guaranteed_quality_delivery
      - automated_issue_resolution
      - continuous_validation
      - reduced_production_defects
      - improved_team_efficiency
      - comprehensive_audit_trail

    considerations:
      - longer_initial_cycle_time
      - higher_computational_resources
      - requires_mature_agent_ecosystem
      - investment_in_automation_setup

# ========== 工作流流程图 ==========
flow_diagram: |
  ```mermaid
  graph TD
    A[Start] --> B[Requirements Analysis]
    B --> C[Design Phase]
    C --> D[Development]
    D --> E[Initial QA]
    E --> F[Global Audit]
    F --> G{Issues Found?}
    G -->|Yes| H[Issue Dispatch]
    H --> I[Parallel Fix Execution]
    I --> J[Fix Validation]
    J --> K{Validation Passed?}
    K -->|No| L[Rework]
    L --> I
    K -->|Yes| M[Quality Loop Check]
    M --> N{Quality Achieved?}
    N -->|No| F
    N -->|Yes| O[Final Validation]
    O --> P{Approved?}
    P -->|No| Q[Escalate]
    P -->|Yes| R[Release Ready]
    R --> S[Complete]
    G -->|No| O
    
    style F fill:#FFE4B5
    style H fill:#FFB6C1
    style J fill:#ADD8E6
    style M fill:#98FB98
    style O fill:#DDA0DD
    style R fill:#90EE90
  ```

# ========== 执行示例命令 ==========
execution_examples:
  start_workflow: |
    xiaoma workflow start enhanced-fullstack-with-qa-loop \
      --project-name "mission-critical-app" \
      --quality-priority "maximum" \
      --enable-parallel \
      --monitor-realtime

  monitor_progress: |
    xiaoma workflow status \
      --show-quality-metrics \
      --show-issue-tracking \
      --show-loop-iterations

  manual_intervention: |
    xiaoma workflow intervene \
      --workflow-id {id} \
      --action "approve_conditional" \
      --justification "acceptable_risk"
